<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Diel Duarte]]></title>
  <subtitle><![CDATA[Desenvolvedor Front End]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://dielduarte.com/"/>
  <updated>2016-04-01T19:40:21.000Z</updated>
  <id>http://dielduarte.com/</id>
  
  <author>
    <name><![CDATA[Diel Duarte]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Angular component]]></title>
    <link href="http://dielduarte.com/angular-component/"/>
    <id>http://dielduarte.com/angular-component/</id>
    <published>2016-04-01T18:31:40.000Z</published>
    <updated>2016-04-01T19:40:21.000Z</updated>
    <content type="html"><![CDATA[<p>Mesmo nos ultimos tempos todos os olhos se voltando para o react e o angular 2, não podemos esquecer do angular na sua versão 1 que ainda é amplamente utilizada por diversos projetos, empresas e segue em constantes atualizações. Sua última grande atualizaçāo na versão 1.5 foi o angular component.</p>
<h3> Mas o que é  o angular component ? </h3>

<p>Component é um tipo especial de directiva, sua configuração/criação é mais simples que uma directiva normal e é adequada para utilizar em um aplicativo baseado em componentes. Component veio para facilitar a vida de quem pretende atualizar seu app para angular 2 ao sair sua versão estável, seu uso se assemelha bastante também ao uso de web componentes.</p>
<h3>E qual a vantagem do component em relação a uma directiva normal?</h3>

<ul>
<li>Como dito no parágrafo acima, é mais fácil de configurar/criar um component.</li>
<li>Foi criado e é otimizado para uma arquitetura baseada em componentes.</li>
<li>Atualizar o seu app para a versão 2 do angular será muito mais fácil.</li>
</ul>
<h3> Quando não usar componentes e optar por directivas ? </h3>

<ul>
<li>Quando precisamos fazer manipulação de DOM,  pois funções existentes em directivas como link e compile não estão disponíveis.</li>
<li>Quando precisamos criar uma directiva mais avançada.</li>
<li>Quando precisamos usar uma directiva como atributo ou classe css.</li>
</ul>
<h3>Um Exemplo básico de como escrever um component</h3>

<p>Vamos criar um component chamado card-user, nosso componente vai receber apenas o nome do usuário pois se trata de um exemplo.</p>
<ul>
<li>Criamos um modulo para nosso app:</li>
</ul>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">angular.<span class="keyword">module</span>(<span class="symbol">'app'</span>, <span class="literal">[]</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>Agora crie um controller principal</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">angular</span><br><span class="line">    .module(<span class="string">'app'</span>)</span><br><span class="line">    .controller(<span class="string">'appController'</span>, appController);</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">appController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">        vm.user = &#123;</span><br><span class="line">            name: <span class="string">'Diel Duarte'</span></span><br><span class="line">        &#125;;</span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>Nosso component user-card</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">angular</span><br><span class="line">    .module('app')</span><br><span class="line">    .component('userCard', &#123;</span><br><span class="line">            <span class="keyword">template</span>: '&lt;h1&gt;&#123;&#123; $ctrl.user.name &#125;&#125;&lt;/h1&gt;',</span><br><span class="line">            bindings: &#123;</span><br><span class="line">                user: '=',</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>obs:</strong> Por default dentro de um component o controller as syntax é definido como <code>$ctrl</code>.</p>
<ul>
<li>E por último mas não menos importante, nosso index.html</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>Angualar component<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-controller</span>=<span class="value">"appController as vm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">user-card</span> <span class="attribute">user</span>=<span class="value">"vm.user"</span>&gt;</span><span class="tag">&lt;/<span class="title">user-card</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"app.js"</span>&gt;</span><span class="handlebars"><span class="xml"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>
<p><strong>Pronto!</strong> veja funcionando <a href="https://embed.plnkr.co/WsYdTHl4KzIx0sLDdodq/" target="_blank" rel="external">aqui</a>.</p>
<p>Se você gostou e deseja se aprofundar ainda mais em component nada melhor que propria doc do angular, <a href="https://docs.angularjs.org/guide/component" target="_blank" rel="external">veja aqui</a>. No próximo post falaremos sobre aquitetura baseada em components , ate lá =)  </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Mesmo nos ultimos tempos todos os olhos se voltando para o react e o angular 2, não podemos esquecer do angular na sua versão 1 que ainda]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Usando a tag picture]]></title>
    <link href="http://dielduarte.com/usando-a-tag-picture/"/>
    <id>http://dielduarte.com/usando-a-tag-picture/</id>
    <published>2016-02-22T17:08:21.000Z</published>
    <updated>2016-02-22T17:55:03.000Z</updated>
    <content type="html"><![CDATA[<p>Hoje em um freela me deparei com um problema de imagens responsivas e lembro que recentemente li um post sobre o picture o qual falava que seu suporte já estava bem bacana pelo menos no chrome, firefox e edge. Resolvi dar uma estudada a fundo e criar esse post ao mesmo tempo pois, vou usa-lo no projeto em que estou trabalhando.</p>
<p><strong>OBS:</strong> Estou tentando utilizar essa técnica de escrever um post ao estudar sobre determinado assunto e estou gostando muito do resultado. Tentem vocês também amiguinhos! as vezes temos medo de compartilhar um pouco do que sabemos por achar que é muito básico ou que vai ser ridicularizado por alguém, mas se você aprendeu com certeza outras pessoas também estão procurando sobre o mesmo assunto. <em>COMPARTILHE</em>!</p>
<h2 id="O_que_é_?_e_para_que_serve_?">O que é ? e para que serve ?</h2><p>A tag picture surgiu da necessidade de tratarmos imagens responsivas, ou seja, imagem certa para resolução certa. Ja imaginou seu usuário acessando seu site através de um 3g com limite de 10mb por dia, baixando uma imagem de 20mb? conseguiu visualizar o problema ?</p>
<p>Alem disso não há necessidade de baixarmos uma imagem de 1920x700 por exemplo, em um um smartphone com resolução maxima de 320px no caso de um iPhone 4.</p>
<h2 id="Como_usar_?">Como usar ?</h2><p>Tag picture é muito simples, bem parecida por exemplo com a tag de audio, aonde colocamos na tag source vários arquivos de audios com extensões diferentes para determinados browsers. A diferença é que na tag source dentro da tag picture vamos configurar varias imagens diferentes para cada resolução. Vamos ver isso de uma forma mais prática, vejamos o código a baixo:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">source</span> <span class="attribute">srcset</span>=<span class="value">'imagem-grande.png'</span> <span class="attribute">media</span>=<span class="value">'(min-width: 960px)'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">source</span> <span class="attribute">srcset</span>=<span class="value">'imagem-pequena.png'</span> <span class="attribute">media</span>=<span class="value">'(max-width: 480px)'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">srcset</span>=<span class="value">'imagem-default.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Os atributos da tag source como podemos ver acima são:</p>
<ul>
<li><strong>srcset</strong> onde passamos o caminho da imagem</li>
<li><strong>media</strong> Configuramos as medias em que essa imagem será exibida (lembra das media querys do css?).</li>
</ul>
<p>Nesse exemplo estamos mostrando a nossa <code>imagem-grande.png</code> quando o tamanho da tela for maior ou igual a 960px simulando desktops, e quando o maximo for 480px simulando celulares vamos mostrar a <code>imagem-pequena.png</code>. Quando nenhuma dessas regras forem atendidas mostramos a <code>imagem-default.png</code>.</p>
<p>Ok Diel, mas qual a real vantagem da tag picture? A real vantagem de usarmos a tag picture é que ela só vai fazer o download da imagem correta para a media do cliente eliminando o nosso problema de baixar uma imagem gigante desnecessaria o que nos faz ganhar em performance de carregamento da nossa página.</p>
<h2 id="E_suporte_dos_browsers_?">E suporte dos browsers ?</h2><p>Podemos ver no <a href="http://caniuse.com/#search=picture" target="_blank" rel="external">can i use </a> que o suporte já está bem bacana no chrome, firefox e edge já suportam sem grandes problemas.</p>
<p>Mas se você precisa dar um suporte maior ainda, podemos usar um polyfill chamado <a href="https://scottjehl.github.io/picturefill/" target="_blank" rel="external">picturefill</a>.</p>
<p>Por hoje é só, valeu! =)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hoje em um freela me deparei com um problema de imagens responsivas e lembro que recentemente li um post sobre o picture o qual falava qu]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Conhecendo o vue.js]]></title>
    <link href="http://dielduarte.com/conhecendo-o-vue-js/"/>
    <id>http://dielduarte.com/conhecendo-o-vue-js/</id>
    <published>2016-02-06T12:52:33.000Z</published>
    <updated>2016-02-11T13:20:58.000Z</updated>
    <content type="html"><![CDATA[<p>Vue.js é uma simples mas poderosa biblioteca para construção de interfaces web modernas e interativas com o poder do data  - <strong>lindo</strong> -  binding :P e focado em componentização da interface.</p>
<p>Em meu entendimento - que não é  verdade absoluta -  o Vue consegue juntar o melhor do mundo Angular com a ideia de componentização muito parecida com algumas libs como React e Riot. É claro que sem a utilização do virtual DOM, ao invés disso Vue usa DOM real pois é importante frisar que ele tem o propósito de resolver uma solução progmática para a web, enquanto outros frameworks, por exemplo o React, tenta solucionar para várias plataformas. Se você quer saber mais sobre as principais diferenças entre Vue e outros frameworks veja esse <a href="http://vuejs.org/guide/comparison.html" target="_blank" rel="external">link</a>.</p>
<p>É possível perceber grande influência do Angular em como tratar o data binding, funções como v-for e v-if iguais há ng-repeat e ng-if, entre outros. Sua  api é muito simples e rápida para pegar, principalmente para quem ja estuda/trabalha com outros frameworks javascript aprender Vue não será um problema.</p>
<h2>E Como posso usar Vue.js na minha aplicação?</h2>

<p>Podemos iniciar uma aplicação com Vue de diversas formas, de uma forma rápida como no exemplo que vamos fazer hoje importando o arquivo js instalado a partir do <em>npm</em> ou <em>bower</em>. Também existe a opção de usar o vue-cli um generator oficial com um scaffolding para projetos usando o <em>Vue + WebPack</em> ou <em>Vue + browserify</em> ou até mesmo chamando o arquivo do Vue através de uma cdn.</p>
<p>Saiba mais nesse <a href="http://vuejs.org/guide/installation.html" target="_blank" rel="external">link</a>.</p>
<h2>Criando um simples hello world com Vue.js</h2>

<ul>
<li>Crie uma pasta para seu projeto</li>
<li>Inicie a configuraçao do bower com <code>bower init</code></li>
<li>Instale o Vue.js com <code>bower install vue --save</code></li>
</ul>
<p>Crie um arquivo <code>index.html</code> com o básico de uma estrutura html, como no exemplo abaixo:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">   	 	<span class="tag">&lt;<span class="title">title</span>&gt;</span>hello world vue.js<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>importe o Vue.js</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"bower_components/vue/dist/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Crie um componente html com id <code>#hello</code> e imprima o model chamado message:</li>
</ul>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"hello"</span>&gt;</span></span><br><span class="line">    </span><span class="expression">&#123;&#123; <span class="variable">message</span> &#125;&#125;</span><span class="xml"></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>No mesmo arquivo vamos criar um script criando uma instância do Vue:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line"> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#hello'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'hello world! =)'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Para criar uma nova instância do Vue como fizemos no exemplo acima basta digitarmos <code>new Vue(options);</code> aonde <strong>options</strong> é um objeto de configurações.</p>
<p>Na chave <code>el</code> do nosso objeto passamos como valor o id do nosso componente, no caso <code>#hello</code>. A chave <code>data</code> é um objeto aonde setamos nossos models. Models são públicos ao nosso componente e controlados atraves do data - <strong>lindo</strong> - binding :P. Criamos um model <code>message</code> que nada mais é que uma string com uma messagem de olá mundo que será exibida no nosso componente.</p>
<p>Pronto! abra o seu arquivo index.html e veja a mensagem de olá mundo.</p>
<p>Esse exemplo é muito básico mas o propósito desse post é ser uma introdução sobre o Vue.js, no próximo post vamos fazer uma todo list o que dará uma visão bem mais ampla do poder dessa lib e poderemos aprender mais sobre o Vue. Até lá =)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Vue.js é uma simples mas poderosa biblioteca para construção de interfaces web modernas e interativas com o poder do data  - <strong>lind]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Escrevendo BEM classes css]]></title>
    <link href="http://dielduarte.com/escrevendo-bem-classes-css/"/>
    <id>http://dielduarte.com/escrevendo-bem-classes-css/</id>
    <published>2015-11-10T01:30:16.000Z</published>
    <updated>2015-12-26T20:29:01.000Z</updated>
    <content type="html"><![CDATA[<p><strong>OBS</strong>: Neste post vou dar apenas um overview sobre o assunto, então se você quer se aprofundar sobre BEM indico ler esse post <a href="http://u.planb.com.br/blog/ti/metodologia-bem/" target="_blank" rel="external">aqui</a>, escrito pelo Lucas Germano um grande brother meu.</p>
<p>BEM é a sigla para <strong>“block element modifier”</strong>. Ele sugere que organizamos nossas estrutura/nomenclatura css em 3 níveis, bloco, elemento e modificador.</p>
<h3>Bloco</h3>

<p>Vamos imaginar que temos um página html um elemento article, que nada mais é do que um post de um blog que terá seu título e texto</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Titulo do post<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Texto do post<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">article</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Analisando o código acima conseguimos visualizar que o elemento pai é a tag <code>&lt;article&gt;</code>, essa tag seria um elemento do tipo bloco. Elementos do tipo bloco são os elementos pai de um componente. O BEM prega o uso de classes ao invés de ID, então vamos dar uma classe para nosso elemento chamada de .post</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">article</span> <span class="attribute">class</span>=<span class="value">'post'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Titulo do post<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Texto do post<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">article</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3>Elemento</h3>

<p>Analisando novamente nosso código, se quisermos estilizar o titulo do nosso post poderíamos utilizar o css:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.post</span> <span class="tag">h1</span> <span class="rules">&#123; <span class="comment">/* algum estilo lindo aqui dentro*/</span> &#125;</span></span><br></pre></td></tr></table></figure>
<p>mas sempre vamos utilizar um h1 dentro do nosso article? e se algum dev desinformado desse padrão colocar um h2 no lugar? Pensando nisso vamos dar uma classe para nosso título, algo como isso:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">article</span> <span class="attribute">class</span>=<span class="value">'post'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">'post__title'</span>&gt;</span>Titulo do post<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Texto do post<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">article</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Perceba o que fizemos acima, repetimos o nome do elemento pai + __ + nome do nosso componente. O BEM prega o uso de dois undercores para dizermos que o elemento filho faz parte do elemento pai, quando algum outro dev da sua equipe bater o olho em um css assim:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.post__title</span> <span class="rules">&#123; <span class="comment">/*um estilo bem lindo aqui*/</span> &#125;</span></span><br></pre></td></tr></table></figure>
<p>ele vai saber que o titulo pertence ao componente post, simples não? Além de ficar fácil o entendimento do que se trata ainda economizamos um aninhamento de seletores melhorando nossa performance, <strong>ISSO É AMOR!</strong> Levando em consideração tudo que falei acima qual classe poderíamos dar ao texto do post? usando a mesma ideia de nomenclatura para elementos filhos: nome do pai + __ + nome do filho ficaria assim:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;article <span class="keyword">class</span>=<span class="string">'post'</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h1 <span class="keyword">class</span>=<span class="string">'post__title'</span>&gt;Titulo <span class="keyword">do</span> post&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p <span class="keyword">class</span>=<span class="string">'post__text'</span>&gt;Texto <span class="keyword">do</span> post&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/article&gt;</span><br></pre></td></tr></table></figure>
<h3>Modificadores</h3>

<p>Como o própio nome já diz, elementos modificadores modificam o estilo atual, usamos isso para poder reutilizar ao máximo nosso css modificando apenas o que realmente importa. A regra de nomenclatura empregada pelo BEM para elementos modificadores é simples: nome do elemento +  –  + nome do modificador.</p>
<p>Vamos supor que existam posts patrocinados no nosso blog em que a cor da fonte do título de posts patrocinados será vermelha, vamos criar um modificador chamado <code>.post__title—-sponsored</code> aonde essa classe modifica apenas o que realmente precisamos ficando assim:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.post__title</span>—<span class="tag">-sponsored</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<p>o que resultaria em um html final assim:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">article</span> <span class="attribute">class</span>=<span class="value">’post’</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">’post__title</span> <span class="attribute">post__title</span>—<span class="attribute">-sponsored</span>’&gt;</span>Titulo do post<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">’post__text’</span>&gt;</span> Texto do post<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">article</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Muitas pessoas dizem que as classes utilizando BEM ficam enormes e por isso não gostam de utiliza-lo, mas o nível de organização e facilidade para entendermos do que se trata é outro, principalmente quando trabalhamos em equipe. Por hoje e só galera, até a próximo post =).</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>OBS</strong>: Neste post vou dar apenas um overview sobre o assunto, então se você quer se aprofundar sobre BEM indico ler esse p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[oi =)]]></title>
    <link href="http://dielduarte.com/oi/"/>
    <id>http://dielduarte.com/oi/</id>
    <published>2015-10-10T23:36:35.000Z</published>
    <updated>2015-12-26T20:32:02.000Z</updated>
    <content type="html"><![CDATA[<p>Estou muito feliz por ter lançado esse blog, aqui falarei um pouco sobre minhas experiências como desenvolvedor front end e desenvolvimento no geral. Então já sabe, vou falar muito sobre html, css e o lindão do javascript. =)</p>
<h5 id="Mas_antes_deixa_eu_me_apresentar_rapaz!">Mas antes deixa eu me apresentar rapaz!</h5><p>Me chamo Diel Duarte, tenho 21 anos e trabalho desde 2013 como desenvolvedor front end. Atualmente trabalho como desenvolvedor front end na ufmg e também tenho alguns projetos com alguns amigos em desenvolvimento. </p>
<p>Nas horas vagas eu me aventuro tocando um violãozinho e bateria, e sempre que dá testando e aprendendo sobre novas técnicas e tecnologias para ser um bom profíssional.</p>
<p>Por enquanto é isso! espero que gostem dos próximos posts =)</p>
<p><strong>OBS</strong>: Se você usa algum leitor de rss já rola de seguir meu blog e ser avisado quando eu postar coisas novas ! vlw   </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Estou muito feliz por ter lançado esse blog, aqui falarei um pouco sobre minhas experiências como desenvolvedor front end e desenvolvimen]]>
    </summary>
    
  </entry>
  
</feed>
