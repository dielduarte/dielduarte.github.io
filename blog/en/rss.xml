<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Diel Duarte Blog</title><description>Diel&apos;s random and humble thoughts on web technology</description><link>https://dielduarte.dev/</link><language>en-us</language><item><title>A year working remotely</title><link>https://dielduarte.dev/blog/en/a-year-working-remotely/</link><guid isPermaLink="true">https://dielduarte.dev/blog/en/a-year-working-remotely/</guid><description>Working remotely has been one of the best decisions that I have made up to this point. I hope you can learn something from my experience.</description><pubDate>Mon, 20 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Working remotely has been one of the best decisions that I have made up to this point. I hope you can learn something from my experience.&lt;/p&gt;
&lt;h3&gt;First of all, remote work doesn’t mean better quality of life.&lt;/h3&gt;
&lt;p&gt;…but it can help A LOT! in my humble opinion, people who say that remote work is better quality of life, they just wanna sell something to you that isn’t a hundred percent true. your quality of life doesn’t get better just because you started working remotely.&lt;/p&gt;
&lt;p&gt;what helps the most with your quality of life is the flexibility that remote work brings you&lt;/p&gt;
&lt;h3&gt;You don&apos;t have to work at the same time everyday anymore&lt;/h3&gt;
&lt;p&gt;In fact, you learn so much about yourself, like what time am I more productive? what&apos;s the best time to go outside to run or go to the gym ? what&apos;s the best time to work on a task that needs my entire focus ? and many more questions... now you&apos;ve learned about a new person inside you, that you didn&apos;t know before. THIS IS SICK! but has some trade offs, we are gonna talk more about it later.&lt;/p&gt;
&lt;h3&gt;You don&apos;t have to lose your time going to the office&lt;/h3&gt;
&lt;p&gt;I spent 5 years going from my city to another city to work/study, it was just 50 minutes away. In five years I spent 3 months in commuting time.&lt;/p&gt;
&lt;p&gt;seriously, I would love to use those three months for vacations,studying or spend this time with my family and friends. Anything, but not on my way to work...&lt;/p&gt;
&lt;p&gt;Is also important to remind you to do something productive with this time, time is life, and that&apos;s a unique chance that few people have. think about it!&lt;/p&gt;
&lt;h3&gt;You can work anywhere&lt;/h3&gt; 
&lt;p&gt;...if you have internet!!! I doubt that you have seen pictures of people working at the beach, hmm... I&apos;m sorry, but there&apos;s no good connection at the beach, at least not here in Brazil.&lt;/p&gt;
&lt;p&gt;But yeah, I literally can work anywhere I want to, this year I went to the USA two times, Chile one time, and now I&apos;m going to Canada. I didn&apos;t have to ask my boss for vacation time, they don&apos;t care about my timezone, the important thing about my work is delivering value, solving problems, and keeping it working! doesn&apos;t matter where I&apos;m based, my timezone or who I am. In my team, we have people from Brazil, Russia, India, Poland, the USA and more...&lt;/p&gt;
&lt;h3&gt;Now comes the quality of life&lt;/h3&gt; 
&lt;p&gt;When you close your computer at a reasonable hour and can be the best spouse, child, friend, Or can care about your stuff, like studying without needing to sleep less than 8 hours for it, do your hobbies, like playing a musical instrument during the weekdays, travel anytime you want.&lt;/p&gt;
&lt;p&gt;you also need to care about your health, seriously, at the beginning I was eating just fast foods and I got serious problems really fast. Take care of your health, your body, and your mind. there&apos;s no connection between good health and remote work.&lt;/p&gt;
&lt;p&gt;you can also make more money, and it can help a lot. As a remote worker you can work for companies that pay more than average, companies in Brazil can&apos;t afford a good salary like a salary in dollars, and you can have a better life if you make more money, that&apos;s capitalism! I&apos;m not sure how much good is it, but it’s a fact.&lt;/p&gt;
&lt;h1&gt;How about trade offs?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Isolation&lt;/li&gt;
&lt;li&gt;FOMO&lt;/li&gt;
&lt;li&gt;Working more than 8 hours a day&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;all of these are trade offs of remote work if you don&apos;t organize your day and your life, and they can bring serious problems to you.&lt;/p&gt;
&lt;h3&gt;Isolation&lt;/h3&gt;
&lt;p&gt;When you start working remotely, you will spend more time in your house than before, which will force you to be isolated from the rest of humanity. it&apos;s important to have friends, go out to have dinner/lunch, find new groups like going to meetups, conferences, practice exercises. to sum it up, GO OUT, talk with people, spend more time with your family and friends. Don&apos;t keep yourself isolated from the rest of the world.&lt;/p&gt;
&lt;h3&gt;FOMO&lt;/h3&gt;
&lt;p&gt;I can&apos;t help you a lot with FOMO (fear of missing out), ‘cause I&apos;m still learning how to deal with it. And that&apos;s a huge problem for me, and other remote workers as well. The best stuff to do is give 100% of you when you are working and just ignore it totally when you are off. Again, almost 98% of things that happen aren’t urgent, and I need to highly recommend to you the book &lt;a href=&quot;https://www.amazon.com/Doesnt-Have-Be-Crazy-Work/dp/0062874780/ref=sr_1_1?crid=29HZM51PVO126&amp;amp;keywords=it+doesn%27t+have+to+be+crazy+at+work&amp;amp;qid=1579489696&amp;amp;sprefix=it+doesn%2Caps%2C161&amp;amp;sr=8-1&quot;&gt;it doesn&apos;t have to be crazy at work&lt;/a&gt; to go deeper on these techniques to keep sanity at work, remotely or not.&lt;/p&gt;
&lt;h3&gt;Working more than 8 hours a day&lt;/h3&gt;
&lt;p&gt;At least in my experience, this doesn&apos;t happen so often. But I know a lot of people who work remotely and work more than 8 hours a day. You feel a pressure that you put on yourself to show people that you are delivering stuff, cause now, you don&apos;t have anyone watching you &quot;working&quot; in an office, the only proof that you are working are the things that you deliver.&lt;/p&gt;
&lt;p&gt;But don&apos;t be afraid, work is a continuous process, you can continue tomorrow!&lt;/p&gt;
&lt;h1&gt;Is it worth it?&lt;/h1&gt;
&lt;p&gt;As I said at the beginning of this text, working remotely has been one of the best decisions that I did until this point. Be selective, find a good company that provides a healthy remote environment and enjoy your new life!&lt;/p&gt;
&lt;p&gt;I hope you&apos;ve learned something new today!&lt;/p&gt;</content:encoded></item><item><title>Continuity Applied to software development processes</title><link>https://dielduarte.dev/blog/en/continuity-applied-to-software-development-processes/</link><guid isPermaLink="true">https://dielduarte.dev/blog/en/continuity-applied-to-software-development-processes/</guid><description>The case for continuity applied to software engineering processes</description><pubDate>Tue, 13 Feb 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It wasn&apos;t long ago that I became a tech lead for the first time in my career, and right after, I was also considered a Staff engineer. That changed everything, from the person deep into coding (still cause I love it) to the person who represents the technical vision of a team and tries to move the group to a better place, technically speaking.&lt;/p&gt;
&lt;p&gt;I find myself into future and process thinking more often than I was used to, long discussions with product and design teams, back and forth on ideas, POCs, and the most terrible thing every engineer hates, fighting and negotiating time to work on technical debt and improvements.&lt;/p&gt;
&lt;p&gt;It has been interesting! I&apos;ve learned a ton, and although it has not been that long in this position, I&apos;ve been exposed to quite some tricky situations already and have been thinking a lot about long-term continuity. I think I can come up with a math formula to prove that long-term continuity can help with software development processes. Isn&apos;t this a master&apos;s thesis or something? Perhaps I should return to academic life.&lt;/p&gt;
&lt;h2&gt;The success cases and the hidden continuity processes&lt;/h2&gt;
&lt;p&gt;You might wonder, &quot;Why is Diel talking about this now?&quot; The most tricky situations I have been in are related to negotiating time, and if there is something I am obligated to agree with YouTube business coaches that time is finite, the most wanted and expensive resource.&lt;/p&gt;
&lt;p&gt;So why do some areas have success and others don&apos;t? I can&apos;t simply accept it is only because they have the time to focus. Let&apos;s be honest; many mistakes are made along the way, even when focusing full-time on something, which can be translated to &quot;lost time,&quot; and we lost a lot of time. Time is essential, but not the only success factor to take in.&lt;/p&gt;
&lt;p&gt;You know where my hunting is, hence the article title. Continuity applied on top of time is a success factor. Take a quick look around you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A product only delivers new features because of a process of continuing to deliver new features&lt;/li&gt;
&lt;li&gt;Same for bugs, I hope. The product keeps up with bugs because of a process of continuing to solve bugs&lt;/li&gt;
&lt;li&gt;You keep everyone in the company aligned because of a process of continuing to keep everyone aligned.&lt;/li&gt;
&lt;li&gt;Your software uses the most updated dependencies because of the process of continuing to update them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try it yourself:&lt;/p&gt;
&lt;p&gt;{The desired action is successful}, because of a process of continuing doing {desired action}&lt;/p&gt;
&lt;h2&gt;The boring continuity graph and its surprising side effects&lt;/h2&gt;
&lt;p&gt;Desmond Tutu wisely said, &quot;There is only one way to eat an elephant: a bite at a time.&quot; He meant that everything that seems daunting, overwhelming, or even impossible can be accomplished gradually by taking on a little at a time.&lt;/p&gt;
&lt;p&gt;A little at a time... continuity.&lt;/p&gt;
&lt;p&gt;We will always have big projects to work on, which is excellent. I would hate not to have any impactful or complex problems to work on, which usually translates to lots of work on many different fronts. How can we progress in multiple areas while keeping a good pace on delivering new features, UX/DX improvements, maintenance, fixing bugs, and more?&lt;/p&gt;
&lt;p&gt;I&apos;m not advocating having a team that focuses on all of this stuff at the same time, but to be critical and think about what can be parallelized, taking into account the team&apos;s capacity so that we can have continuous health progress on areas that will have a positive impact but would never be prioritized.&lt;/p&gt;
&lt;p&gt;Your company won&apos;t go bank corrupt if the team takes three weeks more to deliver that big feature and yet fixes some bugs and improves DX along the way. But you can only start with people who believe you give them space to succeed and support a solid/healthy process.&lt;/p&gt;
&lt;h3&gt;Applying the continuity formula&lt;/h3&gt;

  
    
      Work that needs to get done
    
    Available/wanted Time
  

&lt;p&gt;Let&apos;s suppose we have a migration work to get done, we would:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;breakdown and have a clear understanding of the work needed.&lt;/li&gt;
&lt;li&gt;Apply and break down chunks of this work on top of available or wanted time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list of actions gives us a very boring constant line:&lt;/p&gt;

&lt;p&gt;No one sees the side effect of that constant visual representation; we eat the elephant one bit at a time. The side effect is that you will start with lots of work to get done but also linearly decrease this number and get closer to the finish. Isn&apos;t this how everything works in software?&lt;/p&gt;

&lt;h2&gt;The unmeasurable side effects&lt;/h2&gt;
&lt;p&gt;As with everything with humans involved, there will be some side effects that I like to call the unmeasurable ones; they are unmeasurable because we are talking about human feelings, motivations, and beliefs.&lt;/p&gt;
&lt;p&gt;Think about this: if your team has been mentioning and asking to work on a long migration that has become a significant problem for the team&apos;s velocity and quality for years, this will directly affect the team&apos;s happiness and motivation. Not addressing big concerns/projects like that can drastically decrease the team&apos;s trust in the company&apos;s capacity to support a solid and healthy process.&lt;/p&gt;
&lt;p&gt;Side effects also extend beyond productivity metrics. It can increase innovation and creative problem-solving by applying continuity and giving back time to teams since they are not spending all the time and energy trying to figure out how to eat the elephant.&lt;/p&gt;
&lt;p&gt;Ultimately, we all have one goal: to ship with quality and faster.&lt;/p&gt;</content:encoded></item><item><title>Creating your first application using React and Xstate</title><link>https://dielduarte.dev/blog/en/creating-your-first-application-with-react-and-xstate/</link><guid isPermaLink="true">https://dielduarte.dev/blog/en/creating-your-first-application-with-react-and-xstate/</guid><description>This and in the next episode we will build one application using StateChart and Xstate.</description><pubDate>Tue, 24 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;hold up! this post is gonna be translated to english soon.&lt;/p&gt;</content:encoded></item><item><title>How to describe your really good pull request</title><link>https://dielduarte.dev/blog/en/how-to-describe-your-really-good-pull-request/</link><guid isPermaLink="true">https://dielduarte.dev/blog/en/how-to-describe-your-really-good-pull-request/</guid><description>Sharing my vision on pull requests and best practices</description><pubDate>Thu, 07 Sep 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Throughout my whole career I&apos;ve been receiving some really good feedbacks on how I described and organize my pull requests from colleagues and managers. I&apos;m not especial or better than anyone, in fact, most of the teams I had the opportunity to work had a well established step by step guide on how to write descriptions. So why so many good feedbacks? what do I do different? A couple of weeks ago I started thinking about it, and I decided to write this post with a few points on how I see PRs as part of my job.&lt;/p&gt;
&lt;h2&gt;Treat PRs description as documentation&lt;/h2&gt;
&lt;p&gt;Imagine your team received a bug notification, a PR that was merged 6 months ago is causing the issue. Your first reaction is to open the PR for more context, the code changed was 1 line changed with no tests and the description looks close to something like that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fix the bug #12123 &amp;lt;- link to the ticket.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point you wanna cry, I know! I would too. &lt;/p&gt;
&lt;p&gt;I faced this situation so many times during my career regardless if it was a bug or a feature, that I just started seeing my PRs descriptions as documentation and time saver. As a really good documentation my expectation is that it answers as many questions as I can have at any point, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What was the scenario/environment at that time&lt;/li&gt;
&lt;li&gt;Strategies considered but not chosen and the why&lt;/li&gt;
&lt;li&gt;Strategy used and why&lt;/li&gt;
&lt;li&gt;How to review the code&lt;/li&gt;
&lt;li&gt;How to make sure what you did works / how to test it&lt;/li&gt;
&lt;li&gt;Any expected side effects&lt;/li&gt;
&lt;li&gt;As many links to external resources as possible to add up context such as slack threads, APIs documentation, stack overflow links and internal tickets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I think about good documentation, the best docs I read put me in the right context by telling me the &lt;code&gt;why&lt;/code&gt; and &lt;code&gt;how&lt;/code&gt;, assuming I&apos;m a stranger and not the creator of the creature. Always assume whoever is reading don&apos;t know as much as you do.&lt;/p&gt;
&lt;h2&gt;Engage your readers&lt;/h2&gt;
&lt;p&gt;This point requires time to understand your audience/team, but as soon as you know what engage more, go for it! With time and feedback you start to understand your team&apos;s preferences and improve on top of it, does my audience prefer long texts vs videos? or maybe they will like some charts explaining flows. Whatever it is, do it!&lt;/p&gt;
&lt;p&gt;Engaging documentations are well organized, won&apos;t require hours of uninterrupted attention, shows its value at the beginning and make people want to finish because it is easy to follow. Recently I received a very cool feedback, and it wasn&apos;t even related to my PRs but the way I communicate, it feels relevant to share though:&lt;/p&gt;
&lt;p&gt;&quot;I checked that support link you posted. Always love reading your solutions and the questions/answers format, it&apos;s like a conversation making it easy to understand.&quot; - from an amazing person I have the pleasure to work with. ❤️&lt;/p&gt;
&lt;h2&gt;Be your worst reviewer - in the good way.&lt;/h2&gt;
&lt;p&gt;Always review your PRs before sharing with your team and be critical, at the end of the day you are the best person that knows your limits and how good you can delivery something. Always question your decisions, does this code really makes sense? what could I do better here? what would I suggest if this wasn&apos;t my own code and if I would suggest it, why I haven&apos;t done it already?&lt;/p&gt;
&lt;p&gt;Add comments to lines/functions/files you think your team will have questions. Use this strategy to guide the reviewers to the points in the code you might not be sure about and want feedback, be ahead of them and respect your colleagues time by using their time wisely.&lt;/p&gt;
&lt;p&gt;Let&apos;s be honest &lt;b&gt;everyone is busy&lt;/b&gt;, and quite often code review time is not considered when discussing the team&apos;s capability of committing to delivering a feature or fixing a bug. Avoiding back and forth and being as clear as possible is a way to show you respect your reviewers and you are trying to do your best work.&lt;/p&gt;
&lt;p&gt;Hope I gave you some insights on how to improve your daily work with PRs 👋&lt;/p&gt;</content:encoded></item><item><title>Mastering code splitting with webpack</title><link>https://dielduarte.dev/blog/en/mastering-code-splitting-with-webpack/</link><guid isPermaLink="true">https://dielduarte.dev/blog/en/mastering-code-splitting-with-webpack/</guid><description>let&apos;s talk about how Webpack can help us to code splitting and achieve the goal of better website performance.</description><pubDate>Wed, 17 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;code splitting is a build time process that splits pieces of your code into async chunks, let&apos;s talk about how Webpack can help us to code split and achieve the goal of better website performance.&lt;/p&gt;
&lt;h2&gt;But first, How to know when I have to split my code?&lt;/h2&gt;
&lt;p&gt;The most expensive part of rendering websites is about downloading, and parsing  Javascript and css. That said, if we don&apos;t need to render a specific piece of code on the first render, this code is a good candidate to split and be downloaded by demand, no secrets so far.&lt;/p&gt;
&lt;p&gt;Google Chrome has a nice dev tool called &lt;code&gt;coverage&lt;/code&gt; that shows what percentage of the code delivered it&apos;s being used. This might be used as a metric to follow and know how much code might be split and downloaded by demand.&lt;/p&gt;
&lt;p&gt;To use the coverage tool just open your dev tools, &lt;code&gt;cmd/ctrl + p&lt;/code&gt;, and type &lt;code&gt;show coverage&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;then, on the coverage tab click on the reload button and wait until the website is reloaded, this will show you how much code you are using on that specific page per asset downloaded. It&apos;s AMAZING! &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;In the example above, 46% of the code delivered is &lt;code&gt;not&lt;/code&gt; being used! but that metric is also relative, depends on file size and many other variables, so the context/scenario is super important when using these tools.&lt;/p&gt;
&lt;h2&gt;Code splitting and webpack&lt;/h2&gt;
&lt;p&gt;With webpack we have two ways to work with code splitting, static and &quot;dynamic&quot; imports, both using &lt;a href=&quot;https://v8.dev/features/dynamic-import&quot;&gt;dynamic imports es2020 feature&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Static import&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Good to use when importing heavy javascript libraries/modules&lt;/li&gt;
&lt;li&gt;Anything temporal - things that aren&apos;t visible all the time on your page, tooltip, modal/dialog and even the rest of the page that comes only on scroll could be considered temporal&lt;/li&gt;
&lt;li&gt;Routes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use static imports on your code just do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;path/to/myModule.js&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, even better, making a function to import the module when necessary, the import of the file itself is made just one time, then is cached and the next time calling the function the module is returned instantly, e.g:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;getModule&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; () ⇒ &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;path/to/myModule.js&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;getModule&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Dynamic import&lt;/h3&gt;
&lt;p&gt;&quot;Dynamic&quot; imports aren&apos;t really dynamic since they are made at build time. Using dynamic imports it&apos;s like saying to Webpack: Hey Webpack, please do all possibilities of chunks in this specific path at build time. So in this way, we can pass the chunk file that we wanna import using variables which makes this process kinda dynamic.&lt;/p&gt;
&lt;p&gt;Considering we have a folder of themes like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;themes&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  └── &lt;/span&gt;&lt;span&gt;dark&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  └── &lt;/span&gt;&lt;span&gt;light&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As an example we can do like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;getTheme&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt;) ⇒ &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;path/to/themes/&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;getTheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;dark&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way webpack will create chunks for each theme file inside the themes folder, this technique is called &lt;code&gt;ContextModule&lt;/code&gt; into webpack code.&lt;/p&gt;
&lt;h2&gt;Magic comments&lt;/h2&gt;
&lt;h3&gt;webpackChunkName&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/* webpackChunkName: &quot;my-chunk-name&quot; */&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;path/to/myModule.js&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default webpack creates chunk names following a numeral order, 1.js, 2.js, 3.js which makes the process of debugging harder to recognize which file was imported. using &lt;code&gt;webpackChunkName&lt;/code&gt; we can rename the chunk file, it&apos;s important to remember that for this magic comment work we should be using the config &lt;code&gt;output.chunkFileName: [name].whateverDoYouWantHere.js&lt;/code&gt; on webpack.config file.&lt;/p&gt;
&lt;p&gt;this is only helpful on dev mode, so we can do like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;process&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NODE_ENV&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;development&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/* webpackChunkName: &quot;my-chunk-name&quot; */&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;path/to/myModule.js&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;path/to/myModule.js&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; part will be removed if the build is running in production mode, and the &lt;code&gt;else&lt;/code&gt; part if in dev mode. This is known as dead-code elimination, tools like Uglify.js and others do that to reduce bundle size.&lt;/p&gt;
&lt;h3&gt;webpackMode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/* webpackMode: &quot;lazy&quot; */&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;path/to/themes/&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the magic comment webpackMode has four types of value:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lazy: generate chunks for each dynamic imported module, perfect choice to be used in production mode.&lt;/li&gt;
&lt;li&gt;lazy-once: generate a single chunk that can satisfy all calls to import statement, perfect  choice to dev mode reducing the &quot;bundling&quot; time.&lt;/li&gt;
&lt;li&gt;eager: generates no extra chunk, all modules are included in the current chunk and no additional network requests are made.&lt;/li&gt;
&lt;li&gt;weak: this is useful for universal rendering when required chunks are always manually served in initial requests, a Promise is still returned, but only successfully resolves if the chunks are already with the client. If the module is not available, the Promise is rejected. A network request will never be performed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Prefetch and Preload&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/* webpackPrefetch: true */&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;path/to/themes/&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/* webpackLoad: true */&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;path/to/themes/&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;both comments above will create a link tag with &lt;code&gt;rel=prefetch&lt;/code&gt; or &lt;code&gt;rel=preload&lt;/code&gt; automatically for you, prefetching or preloading your chunks depends on the situation. if you don&apos;t know what prefetch and preload links do, I highly recommend you to read that post &lt;a href=&quot;https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf&quot;&gt;Preload, Prefetch And Priorities in Chrome&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This were my notes of &lt;a href=&quot;https://frontendmasters.com/courses/performance-webpack/&quot;&gt;Web performance with webpack&lt;/a&gt; course, I hope you have learned something new today, see you next time! ❤️&lt;/p&gt;</content:encoded></item><item><title>Modeling your first application using Statecharts and Xstate</title><link>https://dielduarte.dev/blog/en/modeling-your-first-application-using-statecharts-and-xstate/</link><guid isPermaLink="true">https://dielduarte.dev/blog/en/modeling-your-first-application-using-statecharts-and-xstate/</guid><description>This and in the next episode we will build one application using StateChart and Xstate.</description><pubDate>Sun, 22 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;hold up! this post is gonna be translated to english soon.&lt;/p&gt;</content:encoded></item><item><title>Rescript from a JS dev point of view</title><link>https://dielduarte.dev/blog/en/rescript-from-a-js-dev-point-of-view/</link><guid isPermaLink="true">https://dielduarte.dev/blog/en/rescript-from-a-js-dev-point-of-view/</guid><description>A few opinions about Rescript language.</description><pubDate>Tue, 27 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;You all know that I&apos;m fascinated to learn new languages, I like to study compilers/transpilers, etc.. the last two languages I&apos;ve been learning are Go (thanks to &lt;a href=&quot;https://github.com/guilhermehubner&quot;&gt;Guilherme&lt;/a&gt; that influenced me and convince me to use in a side project that we are doing together 💜, this is one of the best engineers I know) and Rescript. You also know, that I make money as a JS/front-end engineer and I love it, even though with all the problems we have with JS, still an amazing language, flexible enough for a beginner to start and for a really experienced programmer to use every day and enjoy it, as well it has the flexibility to run everywhere! Web, Mobile, Desktop, hardware, you choose! The community is amazing and the ecosystem is soo active, at this point we may have a few hundred new npm libs available.&lt;/p&gt;
&lt;p&gt;This is a presentation and a blog post at the same time, just explaining a few points as a JS dev learning Rescript that I considered to say: &quot;you know what? it worth it! Worth learning Rescript language and use it&quot;. This is not a post to say I hate TS, just because, I don&apos;t. I&apos;ve been using TS for the last two years and enjoying it, yet, I can see problems and room to improve as any other language in the world.&lt;/p&gt;
&lt;p&gt;In the end, all I want is to feel productive using something to solve problems, but the right problems. I want to feel confident that I can work in a big refactor and if the compiler compiled with success everything is right, for real. I want to write less and do more because I know the compiler won&apos;t let someone use my functions passing the wrong values, a better inference. I want it to be FAST, so fast that I will save the file again just to make sure it is right instead of opening a new Twitter tab, Rescript.&lt;/p&gt;
&lt;p&gt;That was the biggest intro I&apos;ve ever done, which may show how excited I am. Below are the points I considered important to learn Rescript and why I would use it in a day-to-day project. It doesn&apos;t mean I&apos;m right, just opinions.&lt;/p&gt;
&lt;h2&gt;JS Interop&lt;/h2&gt;
&lt;p&gt;Here&apos;s something for you: JS is the web language! JS is everywhere! and always bet on JS! even if you don&apos;t like it, it is true. So one of the first points that I took a look at was how easy or difficult it would be to use any js lib/ js code without the need to rewrite it to Rescript.&lt;/p&gt;
&lt;p&gt;and why? because I don&apos;t want to stop using JS. If something super cool like Xstate appears or a new browser API, I&apos;d like to still be able to use it on my Rescript code anyway, even if the language doesn&apos;t have official support for it. It needs to be easy to maintain and fast to create if needed.&lt;/p&gt;
&lt;p&gt;Let&apos;s say I&apos;d like to use Lodash, waiting for comments: You don&apos;t need to use Lodash yada yada yada.. bleee, I bet it saved your ass MANY times and it is just an example, anyway, everything you would need to do would be simply defining some types like you would do with TS if you want to have some type safety in your code. e.g:&lt;/p&gt;
&lt;p&gt;We could create a &lt;code&gt;Lodash.res&lt;/code&gt; definitions file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lodash/chunk&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;external&lt;/span&gt;&lt;span&gt; chunk&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&amp;gt;, int) =&amp;gt; array&amp;lt;array&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then in another file whenever you want to use it, it would be just a matter of doing it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;chunks&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you could also export many functions, backing to &lt;code&gt;Lodash.res&lt;/code&gt; again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lodash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;external&lt;/span&gt;&lt;span&gt; chunk&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&amp;gt;, int) =&amp;gt; array&amp;lt;array&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;@&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lodash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;external&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&amp;gt;, array&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&amp;gt; = &quot;difference&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and use in the same way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;chunks&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Readable output&lt;/h2&gt;
&lt;p&gt;The output code that Rescript produces is human readable, clean, and minimal which makes the bundle size to be the same as some human coding JS. Here is the output from the example above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;// Generated by ReScript, PLEASE EDIT WITH CARE&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lodash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;chunks&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;])&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;export&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;chunks&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;/* chunks Not a pure module */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Is it Rescript or JS?&lt;/h2&gt;
&lt;p&gt;Another important point is that the syntax is quite similar to JS, Rescript is another language different than Typescript that is built on top of JS. So having a similar syntax helps a lot to get on track Fast! To prove this point let&apos;s do an exercise called &quot;is it Rescript or JS?&quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;is it Rescript or JS?&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;person&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Big ReScript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Rescript!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;is it Rescript or JS?&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;// 12&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Rescript!&lt;/code&gt; JS is not curried by default, more about that below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;is it Rescript or JS?&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;how are you&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;firstItem&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] &lt;/span&gt;&lt;span&gt;// &quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Rescript!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In fact, almost all the examples would work in JS and Rescript world. The difference is that with Rescript we would have a compiler with an amazing type inference system that would help us write better/safe code and we even didn&apos;t need to write any type yet.&lt;/p&gt;
&lt;p&gt;Of course, we do have a few differences in syntax and features, but they are so minimal that is just a matter of knowing that they exist, for example, if statements:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;showMenu&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;showMenu&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;displayMenu&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nothing here...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we just don&apos;t need to use parentheses.&lt;/p&gt;
&lt;h2&gt;No imports&lt;/h2&gt;
&lt;p&gt;Unlike JS, Rescript doesn&apos;t have export or import statements, what happens in Rescript is that every file is a module and its name needs to be unique. Even files within folders are accessible on the same level as anything else. You just need to use the FileName which needs to be in CamelCase and then dot type/method name and use it.&lt;/p&gt;
&lt;p&gt;you can also use &lt;code&gt;open&lt;/code&gt;  and instead of using &lt;strong&gt;ModuleName.Something&lt;/strong&gt; all the time you would do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;open&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;chunks&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having no imports/exports and module by file system also forces us to keep a more flat structure that has some big advantages long term.&lt;/p&gt;
&lt;p&gt;From the rescript documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, every file&apos;s type declaration, binding and module is exported, aka publicly usable by another file. This also means those values, once compiled into JS, are immediately usable by your JS code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Type system&lt;/h2&gt;
&lt;p&gt;Well, I could write something with my own words, but the Rescript team did an amazing job talking about Types on the Rescript docs page, so, from Rescript docs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Types are the highlight of ReScript! They are:&lt;/p&gt;
&lt;p&gt;Strong. A type can&apos;t change into another type. In JavaScript, your variable&apos;s type might change when the code runs (aka at runtime). E.g. a number variable might change into a string sometimes. This is an anti-feature; it makes the code much harder to understand when reading or debugging.&lt;/p&gt;
&lt;p&gt;Static. ReScript types are erased after compilation and don&apos;t exist at runtime. Never worry about your types dragging down performance. You don&apos;t need type info during runtime; we report all the information (especially all the type errors) during compile time. Catch the bugs earlier!&lt;/p&gt;
&lt;p&gt;Sound. This is our biggest differentiator versus many other typed languages that compile to JavaScript. Our type system is guaranteed to never be wrong. Most type systems make a guess at the type of a value and show you a type in your editor that&apos;s sometime incorrect. We don&apos;t do that. We believe that a type system that is sometime incorrect can end up being dangerous due to expectation mismatches.&lt;/p&gt;
&lt;p&gt;Fast. Many developers underestimate how much of their project&apos;s build time goes into type checking. Our type checker is one of the fastest around.&lt;/p&gt;
&lt;p&gt;Inferred. You don&apos;t have to write down the types! ReScript can deduce them from their values. Yes, it might seem magical that we can deduce all of your program&apos;s types, without incorrectness, without your manual annotation, and do so quickly. Welcome to ReScript =).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&apos;s explore a bit about inference, which is the most exciting part about Rescript language, write less and do more!&lt;/p&gt;
&lt;p&gt;let&apos;s consider the following function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here&apos;s the compiler error if you try to use this function passing two strings instead of numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;We&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;ve found a bug for you&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Users&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;dielduarte&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;testing&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;rescript&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ExternalLibs&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; │ &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; │&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; │ &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;This&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;has&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Somewhere&lt;/span&gt;&lt;span&gt; wanted&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;You&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;can&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;convert&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Belt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromString&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;FAILED&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;cannot&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;make&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;progress&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;due&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;previous&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;errors&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Finish&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;compiling&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;exit&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wow, it looks like how TS compiler should be 😅 with Rescript I feel like I&apos;m pair programming all the time. The compiler shows the error, why, and yet, how to solve it and we didn&apos;t even write any type.&lt;/p&gt;
&lt;p&gt;But how is that possible? well, in Rescript using &lt;code&gt;+&lt;/code&gt; is just valid for numbers, so the compiler infers by default that the function Add just works for numbers. If you want to concatenate strings you should use &lt;code&gt;++&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Variants&lt;/h2&gt;
&lt;p&gt;Most data structures in most languages are about &quot;this and that&quot;. A variant allows us to express &quot;this or that&quot;.&lt;/p&gt;
&lt;p&gt;Variants at first, look like enums with superpowers.&lt;/p&gt;
&lt;p&gt;a simple example would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt; myResponse &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Yes&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; No&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; PrettyMuch&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;areYouCrushingIt&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;hello enums, my old friend.&lt;/p&gt;
&lt;p&gt;But then comes the superpowers, a variant that can contain constructors arguments separated by a comma. e.g:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt; account &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; None&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Instagram(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Facebook&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so then for the same type variant, we could use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myAccount&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Facebook&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Josh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;friendAccount&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Instagram&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jenny&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it can also receive a record (object):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt; user &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Number(int)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Id(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Joe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;me&lt;/code&gt; still from type user, but a different variant. Using pattern matching down the line and variants is such a powerful technique, and can even avoid a few performance issues like you can see &lt;a href=&quot;https://rescript-lang.org/docs/manual/latest/variant#design-decisions&quot;&gt;here&lt;/a&gt; where we reduced our program complexity from 0(n) to 0(1).&lt;/p&gt;
&lt;h2&gt;Pattern matching&lt;/h2&gt;
&lt;p&gt;If variants are enums with superpowers, pattern matching is the switch with superpowers. Mixing both are 🤯&lt;/p&gt;
&lt;p&gt;We can destruct any data using a switch to match patterns (pattern matching) in many different ways, the example below is matching the type used as any &lt;code&gt;Number(id)&lt;/code&gt;, or &lt;code&gt;Id({ name: &quot;Joe&quot; })&lt;/code&gt; an Id with the name equal Joe or any &lt;code&gt;Id(options)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt; user &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Number(int)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Id(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Joe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Number&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Your id is =&amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Joe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Welcome Joe!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Welcome =&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pattern matching can be used to match any type, lists, arrays, tuples, variants, and more. And as it wasn&apos;t enough it is also exhaustive. This means that every time you are matching a type you should check for every different pattern that the type you are checking might be, and, if you forget about it, the compiler will remind you. Let&apos;s suppose in the example above I forgot to handle the Id variant, then the compiler would say:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;number&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Users&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;dielduarte&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;rescript&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ExternalLibs&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; │ &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Joe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; │&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; │ &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; │ &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Number&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Your id is =&amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; │ &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;You&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;forgot&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;handle&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;possible&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;here&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; example&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Finish&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;compiling&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mseconds&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Curried by default&lt;/h2&gt;
&lt;p&gt;This is one of the curiosities about Rescript language that I most enjoyed. All functions in Rescript are curried by default, which means that you can apply partial application whenever you feel that is required and write less code.&lt;/p&gt;
&lt;p&gt;In javascript, to create that example we saw above we would need to use closures or use a helper like &lt;a href=&quot;https://lodash.com/docs/4.17.15#curry&quot;&gt;Lodash curry&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;//closure&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;// 12&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rescript we would need to just create a regular function and use partially:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;// 12&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Labeled arguments&lt;/h2&gt;
&lt;p&gt;In Javascript/Typescript we are used to using an object argument in order to know the arguments&apos; names when using the function and also to not care about its order when passing arguments. something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;updateUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;userOptions&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;//using the function&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;updateUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;Diel&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rescript it is also possible to use an object, BUT, there is something called labeled arguments that is basically using arguments as we would use normally setting a name for it, and then when using the function it would be just a matter of using the name in any order. example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;updateUser&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;//using the function&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;updateUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Diel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;// here you can set the arguments in any order&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember all functions are curried by default? with labeled arguments we can create a new function using any arguments order we want, e.g:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwoToA&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwoToA&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;It doesn&apos;t have null neither undefined&lt;/h2&gt;
&lt;p&gt;That is definitely great! We don&apos;t need to care about a whole category of bugs, however, the idea of a potentially nonexistent value is still useful and that is why Rescript has Option.&lt;/p&gt;
&lt;p&gt;An Option can be represented by Some(value) or None variants, and whenever you need to use a variable from type Option. Rescript will force you to handle both cases due to its exhaustive pattern matching system.&lt;/p&gt;
&lt;p&gt;For example, a user avatar is potentially nonexistent in many applications:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;userAvatar&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;userAvatar&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;None&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The user doesn&apos;t have an avatar, let&apos;s show initials&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The user&apos;s avatar is &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and if you forgot to handle one of the Option variants, the compiler would say:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;number&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Users&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;dielduarte&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;testing&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;rescript&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ExternalLibs&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; │ &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;userAvatar&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; │&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; │ &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;userAvatar&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; │ &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The user&apos;s avatar is &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; │ &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;You&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;forgot&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;handle&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;possible&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;here&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; example&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;None&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Finish&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;compiling&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;82&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mseconds&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;😍 sometimes I feel like I would kiss the Rescript compiler.&lt;/p&gt;
&lt;h2&gt;Easy to use with any build tool&lt;/h2&gt;
&lt;p&gt;Since rescript compiles to JS, you can use Rescript with any build tool, create-react-app, Snowpack, Webpack, Babel, Rome, and more... anything that works for JS would work for Rescript because the idea is:&lt;/p&gt;
&lt;p&gt;Rescript compiles to JS ⇒ then any tool you are using understands the JS files generated and starts working, they don&apos;t necessarily need to know you are using Rescript. To prove that, I created this template to use Rescript with snowpack you can check here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dielduarte/react-snowpack-rescript-template&quot;&gt;dielduarte/react-snowpack-rescript-template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can see that to start the snowpack dev server, I just imported the index.bs.js file generated by the Rescript compiler within the index.html file &lt;a href=&quot;https://github.com/dielduarte/react-snowpack-rescript-template/blob/main/index.html#L13&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The end&lt;/h2&gt;
&lt;p&gt;As I told at the beginning of the post, the idea here was to talk about points that I considered important to take the decision of study more about the language, so I didn&apos;t cover many great things about the language and its benefits, yet, I hope it helps you to at least be interested in learning more!&lt;/p&gt;
&lt;p&gt;and for you, does it worth it?&lt;/p&gt;</content:encoded></item><item><title>The easier way to understand identity functors</title><link>https://dielduarte.dev/blog/en/the-easier-way-to-understand-functors/</link><guid isPermaLink="true">https://dielduarte.dev/blog/en/the-easier-way-to-understand-functors/</guid><description>the easier way to understand functors in my humble opinion is the concept of...</description><pubDate>Tue, 14 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I really like functional programming, and have been studying it during last years, including elm and more recently Reason, just for fun. Never shipped some production ready app in these languages but really fancy the idea to bring some of their concepts to javascript. But somehow I always ended up frustrated with some functional techniques explanations,&lt;/p&gt;
&lt;p&gt;like functors.&lt;/p&gt;
&lt;h2&gt;What are functors in fact?&lt;/h2&gt;
&lt;p&gt;The easier way to understand functors in my humble opinion is the concept of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functors are functions that return the value passed in a way that this value can be mapped over and over again till you get the result expected. it will help you to visualize the flow of the value transformation instead of creating multiple variables in memory in an imperative way, think like the &lt;code&gt;promise.then&lt;/code&gt; method that can be chained step by step.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;talk is cheap, show me the code.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Any type of value can be mappable with functors as we can see in the example below where money is a string:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;convertMoneyToNumber&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;functor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;\$&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;parseFloat&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;//same as .map(money =&amp;gt; parseFloat(money))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Considering we have a function like that previously:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;convertMoneyToNumber&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;moneyWithoutMask&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;\$&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;parseFloat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;moneyWithoutMask&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s create a functor helper first, this function accepts any value and makes it mappable like arrays, so now we can chain .map transforming any value on the value desired:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;functor&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;anyValue&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;functor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;anyValue&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;anyValue&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, the functor helper receives &lt;code&gt;any value&lt;/code&gt; and returns an object with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A method called &lt;code&gt;map&lt;/code&gt; that receives a function and returns a functor of this function execution value, making the new value mappable again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A field called &lt;code&gt;value&lt;/code&gt; that contains the final result of the last function execution, searching you can find variants of this idea like a flatMap method that just returns the last function execution without wrapping it in a functor, then in the last execution instead of using &lt;code&gt;.map().value&lt;/code&gt; you can just use &lt;code&gt;.flatMap(anyValue)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now with this helper, we can convert the convertMoneyToNumber to the first example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;convertMoneyToNumber&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;functor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;\$&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;parseFloat&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;//same as .map(money =&amp;gt; parseFloat(money))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can map any type of value transforming its original value in a new value, not only arrays! Just to be clear this is just the base of the functors idea, there are many more variants.&lt;/p&gt;
&lt;p&gt;I hope you have learned something new today!&lt;/p&gt;</content:encoded></item><item><title>Tips for remote teams</title><link>https://dielduarte.dev/blog/en/tips-for-remote-teams/</link><guid isPermaLink="true">https://dielduarte.dev/blog/en/tips-for-remote-teams/</guid><description>This is a post about async communication, tools, and tips to keep a remote team based on my experiêncie and studies.</description><pubDate>Sun, 19 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a post about async communication, tools, and tips to keep a remote team based on my experiêncie and studies. We&apos;re not talking about a precise science, that said, I highly recommend to test the tips for some weeks and analyze the results with the help of the team feedback.&lt;/p&gt;
&lt;h2&gt;Async vs realtime&lt;/h2&gt;
&lt;p&gt;Try to keep the communication as much async as possible, assimilate that real-time chats are the same as meetings can help. Can you think about spending 8 hours a day in a meeting? In a real situation of extreme remote disorganization it can happen, as a result, the team productivity decreases.&lt;/p&gt;
&lt;p&gt;Avoid using real-time tools, instead, try tools like &lt;a href=&quot;https://twist.com&quot;&gt;Twist&lt;/a&gt; that basically organizes all the team communication by threads.&lt;/p&gt;
&lt;p&gt;Like every developer teams have the culture to spend some time of the day doing code review, it will be necessary to implement the same culture to spend some time of the day checking all threads that they are participating and answer them/take actions if needed.&lt;/p&gt;
&lt;p&gt;Use real-time tools in emergency situations like a bug in production, topics that really requires an answer in real time or day to day situations like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hey, can you help me to find that document X? I can&apos;t find!&lt;/li&gt;
&lt;li&gt;I&apos;ve a problem that I can&apos;t fix, someone free to a pair programming?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and of course, informal conversations in groups or private.&lt;/p&gt;
&lt;h3&gt;One Monday&lt;/h3&gt;
&lt;p&gt;One Monday is a valid concept especially for teams in multiple timezones. The concept means that in an async communication I&apos;m supposed to know that an answer can delay till 24 hours depending on the timezone of the rest of the team and company. I highly recommend that in emergency situations use real-time chats or video calls.&lt;/p&gt;
&lt;h2&gt;Talk with the right people&lt;/h2&gt;
&lt;p&gt;if you need to talk about marketing, send the message in the marketing group, start threads with only the right people related to the marketing topic or related to the topic that you want to discuss. In this way we avoid unnecessary distractions to the rest of the team.&lt;/p&gt;
&lt;p&gt;Receiving notifications about everything all the time, besides being an unnecessary distraction, forces people to mute the communication channel or start ignoring it in order to be able to focus at the work, as a result, a bigger communication gap&lt;/p&gt;
&lt;h2&gt;Add groups by team and knowledge areas&lt;/h2&gt;
&lt;p&gt;Avoid creating groups to each topic or each task that needs to be discussed, in a matter of days this might turn in a big problem and nobody will know in which group answer, again increasing the communication gap.&lt;/p&gt;
&lt;p&gt;Group examples by teams:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;team dashboard&lt;/li&gt;
&lt;li&gt;team website&lt;/li&gt;
&lt;li&gt;Team marketing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Group examples by knowledge areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Front-end&lt;/li&gt;
&lt;li&gt;Back-end&lt;/li&gt;
&lt;li&gt;Designers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use groups by knowledge areas to increase engagement and knowledge sharing. It makes much more sense a front-end ask some questions about CSS in a group focused in front-end instead of asking in a general chat with everyone of the company or even in a group focused in the back-end.&lt;/p&gt;
&lt;h2&gt;Status&lt;/h2&gt;
&lt;p&gt;A good way to know if someone is online or not is using chat status. Some tools, like Slack, enable the users to add more status besides only online/offline. A nice idea that my current team use and it is working well are the statuses:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;We can see the status next to the user name:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;In the example above, I know that the user Magdiel Duarte is offline, it means that even though I send a message to him the answers won&apos;t be instantaneous and that&apos;s okay! send the message in the same way and wait. If you really need an instantaneously answer always send in groups where more people can help.&lt;/p&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;Always uses video calls with video enabled, it increases the team engagement, makes people feel more comfortable with that moment and keep them focused.&lt;/p&gt;
&lt;h3&gt;C-Levels meetings&lt;/h3&gt;
&lt;p&gt;One of the techniques listed in the book &quot;It doesn&apos;t have to be crazy at work&quot; is a concept that 1 or 2 weekdays the C-levels are free for some hours to make meetings with anyone in the company, the time slots are somehow public to everyone, using google calendar for example. outside these time slots, meetings with C-levels are restricted to only urgent topics.&lt;/p&gt;
&lt;p&gt;Do you remember about chats in real-time being considered meetings? Just imagine a day to day of a C-level answering people questions all the time, they wouldn&apos;t be able to work besides answering questions.&lt;/p&gt;
&lt;h3&gt;Daily Reports&lt;/h3&gt;
&lt;p&gt;Daily reports might be done either by video calls with video enabled or via text.&lt;/p&gt;
&lt;p&gt;In a distribuited team in multiple timezones text is a good option. Tools like &lt;a href=&quot;https://statushero.com/&quot;&gt;Status Hero&lt;/a&gt; help people to not forget to send the reports, save all daily reports in a nice dashboard and bring some interesting insights like general productivity by day.&lt;/p&gt;
&lt;p&gt;Choosing Daily reports via video calls might increase the engagement, especially if the day to day doesn&apos;t have a lot of meetings.&lt;/p&gt;
&lt;p&gt;In this case, I highly recommend testing the two ways and ask people feedback to choose one.&lt;/p&gt;
&lt;h2&gt;TIL - Today I learned&lt;/h2&gt;
&lt;p&gt;One of the main concerns, when people start working remotely, is the lack of knowledge sharing. Today I learned is a channel where people share knowledge whenever they think is worth it to share, not necessarily regards the company context and not necessarily every day.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;One of the main concerns as well is about visibility when people start working remotely. Thanks is a channel where people can publically say thanks to a coworker about something he or she has done to help in any situation. Here&apos;s a good way to learn about someone&apos;s soft skills remotely, build an environment where people are grateful of each other, increasing team engagement.&lt;/p&gt;
&lt;h2&gt;Hero&lt;/h2&gt;
&lt;p&gt;Hero is a valid concept if the team needs to work with either external or internal support. The concept
means that by each time period determined by the team one person is the &lt;strong&gt;hero,&lt;/strong&gt; this person is responsable to talk directly with the support team, analyze and organize backlog tasks related and work to solve the problems.&lt;/p&gt;
&lt;p&gt;With one person focused on it, the rest of the team can focus to work in new features or big refactors without interruptions to help the support team. It is used to better organize the team time between deep and shalow work, two other important concepts to study.&lt;/p&gt;
&lt;p&gt;One of my references about remote work and deep work is the Doist company, where they apply these concepts. They have a nice blog and I highly recomend two posts about Deep Work and Hero + House Keeping.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doist.com/blog/heroes-housekeeping-days/&quot;&gt;https://doist.com/blog/heroes-housekeeping-days/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doist.com/blog/deep-work/?utm_source=doist_blog&amp;amp;utm_medium=referral&amp;amp;utm_campaign=heroes_housekeeping_days&quot;&gt;https://doist.com/blog/deep-work&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Calendar&lt;/h2&gt;
&lt;p&gt;One of the best ways to get a big picture of everything that is happening at the company is using the calendar.&lt;/p&gt;
&lt;p&gt;I especially recommend google calendar, with google calendar it is possible to share everyone&apos;s calendars with everyone and in an easy way people can send you an invite to a meeting just looking at the free spots, without need to ask you. A good thing to do is to add at the calendar especially when you a not available, some companies ask you to even add personal things if it is during your &quot;work hours&quot;. e.g:&lt;/p&gt;
&lt;p&gt;John goes to the gym every day at 2 pm, so he can add it to the calendar to let people know that he isn&apos;t available between 2 pm - and 3 pm. If John doesn&apos;t feel comfortable to add &quot;going to the gym&quot; at the event description, he can put just &quot;occupied&quot;.&lt;/p&gt;
&lt;h2&gt;Micro-managment&lt;/h2&gt;
&lt;p&gt;Be careful with people micro-management, if you need to ask someone what they are working on, for sure we have a communication problem. The best scenario is to use one task management software or even excel sheets - what&apos;s making more sense for you - where each people can do one task at a time with clear status and within public access for everyone to.&lt;/p&gt;
&lt;h2&gt;FOMO - fear of missing out&lt;/h2&gt;
&lt;p&gt;This is a personal issue, that can happen or not depends on the person. But the company culture can help to decrease the cases to zero. The company can create a rule of 8 hours a day working and nothing more with only exceptions in urgent cases is a great start!&lt;/p&gt;
&lt;p&gt;A culture where people are online 24 hours per day, work even at the weekends cannot be viewed as a good thing by the company and the team leaders. This brings people to a high risk of burnout which is a serious problem, and to the company represents a hight decrease in productivity in the medium and long term.&lt;/p&gt;
&lt;p&gt;To the team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep a routine, it is super important working remotely&lt;/li&gt;
&lt;li&gt;If possible, do not download the company chat on your personal mobile phone.&lt;/li&gt;
&lt;li&gt;configure to receive notifications only in your work hours&lt;/li&gt;
&lt;li&gt;keep in mind that work is a continuous process, you can continue tomorrow!&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>Web development with state charts intro</title><link>https://dielduarte.dev/blog/en/web-development-with-state-charts-intro/</link><guid isPermaLink="true">https://dielduarte.dev/blog/en/web-development-with-state-charts-intro/</guid><description>Once upon a time a front-end development that didn&apos;t know about state charts and were working in a simple tasks...</description><pubDate>Sun, 01 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;hold up! this post is gonna be translated to english soon.&lt;/p&gt;</content:encoded></item></channel></rss>