<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Diel Duarte Blog</title><description>Pensamentos rand√¥micos sobre tecnologias web</description><link>https://dielduarte.dev/</link><language>en-us</language><item><title>Como descrever o seu pull request perfeito</title><link>https://dielduarte.dev/blog/pt-br/como-descrever-o-seu-pull-request-perfeito/</link><guid isPermaLink="true">https://dielduarte.dev/blog/pt-br/como-descrever-o-seu-pull-request-perfeito/</guid><description>Compartilhando minhas experi√™ncias com pull requests</description><pubDate>Thu, 07 Sep 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Ao longo de toda a minha carreira, tenho recebido feedbacks muito positivos sobre como descrevo e organizo meus pull requests de colegas e gestores. N√£o sou especial ou melhor do que ningu√©m, na verdade, a maioria das equipes com as quais tive a oportunidade de trabalhar tinha um guia passo a passo bem estabelecido sobre como escrever descri√ß√µes. Ent√£o, por que tantos feedbacks positivos? O que fa√ßo de diferente? H√° algumas semanas, comecei a pensar sobre isso e decidi escrever este post com alguns pontos sobre como vejo os PRs como parte do meu trabalho.&lt;/p&gt;
&lt;h2&gt;Trate PRs como documenta√ß√£o&lt;/h2&gt;
&lt;p&gt;Imagine que sua equipe recebeu uma notifica√ß√£o de bug, e uma pull request que foi mergeada h√° 6 meses est√° causando o problema. Sua primeira rea√ß√£o √© abrir a pull request para obter mais contexto. O c√≥digo foi alterado em apenas 1 linha, sem testes, e a descri√ß√£o parece algo pr√≥ximo disso:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Corrige o bug #12123 &amp;lt;- link para o ticket.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neste ponto, voc√™ quer chorar, eu sei! Eu tamb√©m iria. &lt;/p&gt;
&lt;p&gt;Enfrentei essa situa√ß√£o muitas vezes ao longo da minha carreira, seja um bug ou uma funcionalidade, e comecei a ver as descri√ß√µes das minhas pull requests como documenta√ß√£o e economia de tempo. Em uma documenta√ß√£o realmente boa, minha expectativa √© que ela responda o m√°ximo de perguntas poss√≠vel em qualquer momento, tais como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qual era o cen√°rio/ambiente naquele momento&lt;/li&gt;
&lt;li&gt;Estrat√©gias consideradas, mas n√£o escolhidas, e o porqu√™&lt;/li&gt;
&lt;li&gt;Estrat√©gia usada e porqu√™&lt;/li&gt;
&lt;li&gt;Como revisar o c√≥digo&lt;/li&gt;
&lt;li&gt;Como garantir que o que voc√™ fez funcione / como test√°-lo&lt;/li&gt;
&lt;li&gt;Efeitos colaterais esperados&lt;/li&gt;
&lt;li&gt;O m√°ximo de links externos poss√≠vel para acrescentar contexto, como threads no Slack, documenta√ß√£o de APIs, links do Stack Overflow e tickets internos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quando penso em uma boa documenta√ß√£o, as melhores que li me colocaram no contexto certo ao me contar o &quot;porqu√™&quot; e o &quot;como&quot;, assumindo que sou um estranho e n√£o o criador da criatura. Sempre assuma que quem est√° lendo n√£o sabe tanto quanto voc√™.&lt;/p&gt;
&lt;h2&gt;Engaje seus leitores&lt;/h2&gt;
&lt;p&gt;Este ponto requer tempo para compreender sua audi√™ncia/equipe, mas assim que souber o que envolve mais, v√° em frente! Com o tempo e feedback, voc√™ come√ßa a entender as prefer√™ncias da sua equipe e melhora com base nelas. Ser√° que minha audi√™ncia prefere textos longos ou v√≠deos? Ou talvez eles gostem de gr√°ficos explicando fluxos. Seja o que for, fa√ßa!&lt;/p&gt;
&lt;p&gt;Documenta√ß√µes envolventes s√£o bem organizadas, n√£o exigem horas de aten√ß√£o ininterrupta, mostram seu valor desde o in√≠cio e fazem com que as pessoas queiram terminar porque s√£o f√°ceis de seguir. Recentemente, recebi um feedback muito legal, e nem foi relacionado √†s minhas pull requests, mas √† forma como me comunico. Acho relevante compartilhar:&lt;/p&gt;
&lt;p&gt;&quot;Verifiquei aquele link de suporte que voc√™ postou. Sempre adoro ler suas solu√ß√µes e o formato de perguntas/respostas, √© como uma conversa lol&quot; - de uma pessoa incr√≠vel com quem tenho o prazer de trabalhar. ‚ù§Ô∏è&lt;/p&gt;
&lt;h2&gt;Seja o seu pior revisor - do jeito bom.&lt;/h2&gt;
&lt;p&gt;Sempre revise suas pull requests antes de compartilh√°-las com sua equipe e seja cr√≠tico; afinal, no final do dia, voc√™ √© a pessoa que melhor conhece seus limites e qu√£o bem pode entregar algo. Sempre questione suas decis√µes: este c√≥digo realmente faz sentido? O que eu poderia fazer melhor aqui? O que eu sugeriria se este c√≥digo n√£o fosse meu, e se eu sugeriria, por que ainda n√£o fiz?&lt;/p&gt;
&lt;p&gt;Adicione coment√°rios nas linhas/fun√ß√µes/arquivos nos quais voc√™ acha que sua equipe ter√° perguntas. Use essa estrat√©gia para orientar os revisores aos pontos do c√≥digo sobre os quais voc√™ pode n√£o ter certeza e deseja feedback. Esteja √† frente deles e respeite o tempo de seus colegas, usando-o sabiamente.&lt;/p&gt;
&lt;p&gt;Sejamos honestos, &lt;b&gt;todos est√£o ocupados&lt;/b&gt;, e muitas vezes o tempo de revis√£o de c√≥digo n√£o √© considerado ao discutir a capacidade da equipe de se comprometer a entregar uma funcionalidade ou corrigir um bug. Evitar idas e vindas e ser o mais claro poss√≠vel √© uma maneira de mostrar que voc√™ respeita seus revisores e est√° tentando fazer o melhor trabalho poss√≠vel.&lt;/p&gt;
&lt;p&gt;Espero que eu tenha lhe dado algumas ideias para melhorar seu trabalho di√°rio com as pull requests. üëã&lt;/p&gt;</content:encoded></item><item><title>Continuidade aplicada aos processos de engenharia de software</title><link>https://dielduarte.dev/blog/pt-br/continuidade-aplicada-a-processos-de-desenvolvimento-de-software/</link><guid isPermaLink="true">https://dielduarte.dev/blog/pt-br/continuidade-aplicada-a-processos-de-desenvolvimento-de-software/</guid><description>A continuidade aplicada aos processos de engenharia de software</description><pubDate>Tue, 13 Feb 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;N√£o faz muito tempo que me tornei l√≠der t√©cnico pela primeira vez em minha carreira e, logo em seguida, tamb√©m fui considerado staff engineer. Isso mudou tudo, de algu√©m imerso na programa√ß√£o (ainda porque eu amo isso) para a pessoa que representa a vis√£o t√©cnica de uma equipe e tenta levar o grupo a um lugar melhor, tecnicamente falando.&lt;/p&gt;
&lt;p&gt;Me encontro mais frequentemente pensando no futuro e nos processos do que eu estava acostumado, longas discuss√µes com equipes de produto e design, idas e vindas de ideias, Provas de Conceito (POCs) e a coisa mais terr√≠vel que todo engenheiro odeia, negociar tempo para trabalhar em d√©bitos t√©cnicos e melhorias.&lt;/p&gt;
&lt;p&gt;Tem sido interessante! Aprendi muito, e embora n√£o tenha sido tanto tempo assim nesta posi√ß√£o, j√° me vi em situa√ß√µes bastante complicadas e tenho pensado muito sobre continuidade a longo prazo. Acho que posso elaborar uma f√≥rmula matem√°tica para provar que a continuidade a longo prazo pode ajudar nos processos de desenvolvimento de software. Isso n√£o seria uma tese de mestrado ou algo assim? Talvez eu devesse voltar √† vida acad√™mica.&lt;/p&gt;
&lt;h2&gt;Os casos de sucesso e os processos de continuidade ocultos&lt;/h2&gt;
&lt;p&gt;Voc√™ pode se perguntar, &quot;Por que Diel est√° falando sobre isso agora?&quot; As situa√ß√µes mais complicadas em que estive relacionam-se √† negocia√ß√£o de tempo, e se h√° algo com que sou obrigado a concordar com os coachs de neg√≥cios do YouTube √© que o tempo √© finito, o recurso mais desejado e caro.&lt;/p&gt;
&lt;p&gt;Ent√£o, por que algumas √°reas t√™m sucesso e outras n√£o? N√£o posso simplesmente aceitar que seja apenas porque elas t√™m tempo para se focar. Sejamos honestos; muitos erros s√£o cometidos ao longo do caminho, mesmo quando se dedica tempo integral a algo, o que pode ser traduzido como &quot;tempo perdido&quot;, e n√≥s perdemos muito tempo. O tempo √© essencial, mas n√£o √© o √∫nico fator de sucesso a ser considerado.&lt;/p&gt;
&lt;p&gt;Voc√™ sabe j√° sabe onde quero chegar, a continuidade aplicada ao tempo √© um fator de sucesso. D√™ uma olhada r√°pida ao seu redor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Um produto s√≥ oferece novos recursos por causa de um processo cont√≠nuo de entrega de novos recursos.&lt;/li&gt;
&lt;li&gt;O mesmo vale para os bugs, espero. O produto continua a arrumar bugs por meio de um processo de resolu√ß√£o cont√≠nua de bugs.&lt;/li&gt;
&lt;li&gt;Voc√™ mant√©m todos na empresa alinhados por meio de um processo de manuten√ß√£o cont√≠nua do alinhamento.&lt;/li&gt;
&lt;li&gt;Seu software usa as depend√™ncias mais atualizadas por meio do processo cont√≠nuo de atualiza√ß√£o delas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Experimente voc√™ mesmo:&lt;/p&gt;
&lt;p&gt;{A a√ß√£o desejada √© bem-sucedida}, por causa de um processo cont√≠nuo de fazer {a√ß√£o desejada}.&lt;/p&gt;
&lt;h2&gt;O gr√°fico de continuidade e seus surpreendentes efeitos colaterais&lt;/h2&gt;
&lt;p&gt;Desmond Tutu disse com sabedoria: &quot;H√° apenas uma maneira de comer um elefante: uma mordida de cada vez.&quot; Ele quis dizer que tudo que parece assustador, avassalador ou at√© mesmo imposs√≠vel pode ser realizado gradualmente, assumindo um pouco de cada vez.&lt;/p&gt;
&lt;p&gt;Um pouco de cada vez... continuidade.&lt;/p&gt;
&lt;p&gt;Sempre teremos grandes projetos para trabalhar, o que √© √≥timo. Eu odiaria n√£o ter nenhum problema impactante ou complexo para resolver, o que geralmente se traduz em muito trabalho em muitas frentes diferentes. Como podemos progredir em v√°rias √°reas enquanto mantemos um bom ritmo na entrega de novos recursos, melhorias na experi√™ncia do usu√°rio/desenvolvedor, manuten√ß√£o, corre√ß√£o de bugs e mais?&lt;/p&gt;
&lt;p&gt;N√£o estou advogando ter uma equipe que se concentre em todas essas coisas ao mesmo tempo, mas ser cr√≠tico e pensar sobre o que pode ser paralelizado, levando em considera√ß√£o a capacidade da equipe para que possamos ter progresso cont√≠nuo e saud√°vel em √°reas que ter√£o um impacto positivo, mas nunca seriam priorizadas.&lt;/p&gt;
&lt;p&gt;Sua empresa n√£o ir√° √† fal√™ncia se a equipe levar tr√™s semanas a mais para entregar aquele grande recurso e, ainda assim, corrigir alguns bugs e melhorar a experi√™ncia do desenvolvedor ao longo do caminho. Mas voc√™ s√≥ pode come√ßar com pessoas que acreditam que a empresa lhes d√° espa√ßo para ter sucesso e apoia um processo s√≥lido e saud√°vel.&lt;/p&gt;
&lt;h2&gt;Aplicando a f√≥rmula de continuidade&lt;/h2&gt;

  
    
      Trabalho que precisa ser feito
    
    Tempo dispon√≠vel/desejado
  

&lt;p&gt;Vamos supor que temos um trabalho de migra√ß√£o para fazer, n√≥s ir√≠amos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dividir e ter uma compreens√£o clara do trabalho necess√°rio.&lt;/li&gt;
&lt;li&gt;Aplicar e dividir groupos deste trabalho em cima do tempo dispon√≠vel ou desejado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esta lista de a√ß√µes nos d√° uma linha constante muito chata:&lt;/p&gt;

&lt;p&gt;Ningu√©m v√™ o efeito colateral dessa representa√ß√£o visual constante; n√≥s comemos o elefante uma mordida de cada vez. O efeito colateral √© que voc√™ come√ßar√° com muito trabalho a ser feito, mas tamb√©m diminuir√° linearmente este n√∫mero e se aproximar√° de zero no final. Isso n√£o √© como tudo funciona em desenvolvimento de software?&lt;/p&gt;

&lt;h2&gt;Os efeitos colaterais n√£o mensur√°veis&lt;/h2&gt;
&lt;p&gt;Como tudo que envolve seres humanos, haver√° alguns efeitos colaterais que gosto de chamar de n√£o mensur√°veis; eles s√£o n√£o mensur√°veis porque estamos falando de sentimentos humanos, motiva√ß√µes e cren√ßas.&lt;/p&gt;
&lt;p&gt;Pense nisso: se sua equipe vem mencionando e pedindo para trabalhar em uma longa migra√ß√£o que se tornou um problema significativo para a velocidade e qualidade da equipe por anos, isso afetar√° diretamente a felicidade e motiva√ß√£o da equipe. N√£o abordar grandes preocupa√ß√µes/projetos como esse pode diminuir drasticamente a confian√ßa da equipe na capacidade da empresa de apoiar um processo s√≥lido e saud√°vel.&lt;/p&gt;
&lt;p&gt;Os efeitos colaterais tamb√©m se estendem al√©m das m√©tricas de produtividade. Isso pode aumentar a inova√ß√£o e a resolu√ß√£o criativa de problemas aplicando continuidade e devolvendo tempo √†s equipes, j√° que elas n√£o est√£o gastando todo o tempo e energia tentando descobrir como comer o elefante.&lt;/p&gt;
&lt;p&gt;No final, todos n√≥s temos um objetivo: produzir com qualidade e mais r√°pido.&lt;/p&gt;</content:encoded></item><item><title>Criando sua primeira aplica√ß√£o com React e Xstate</title><link>https://dielduarte.dev/blog/pt-br/criando-sua-primeira-aplicacao-com-react-e-xstate/</link><guid isPermaLink="true">https://dielduarte.dev/blog/pt-br/criando-sua-primeira-aplicacao-com-react-e-xstate/</guid><description>Construindo sua primeira aplica√ß√£o com react e xstate...</description><pubDate>Tue, 24 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hoje vamos criar nossa primeira aplica√ß√£o utilizando o nosso modelo do post anterior que voc√™ pode ler &lt;a href=&quot;/pt-br/modelando-sua-primeira-aplicacao-com-statecharts-e-xstate/&quot;&gt;aqui&lt;/a&gt;. N√≥s iremos utilizar Snowpack, React e Xstate.&lt;/p&gt;
&lt;p&gt;Instalando depend√™ncias&lt;/p&gt;
&lt;p&gt;Vamos utilizar o Snowpack como nosso sistema de build, e por que? Uma breve explica√ß√£o pois isso daria um post separado √© que o Snowpack √© um sistema de build que utiliza o poder dos ESmodules em desenvolvimento, a ideia √© que com ESmodules n√≥s n√£o precisamos de um builder em tempo de desenvolvimento j√° que os browsers modernos conseguem importar esmodules, isso faz com que sua ferramenta de desenvolvimento seja constante O(1) para startar seu dev server e tbm para fazer reloads ignorando o tamanho do seu projeto. Como disse isso daria um post separado que vamos ter em breve aqui no blog!&lt;/p&gt;
&lt;p&gt;Instalando usando o create-snowpack-app:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;npx&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;snowpack&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;cats&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;@snowpack&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;react&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;yarn&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esse comando vai criar uma pasta chamada &lt;code&gt;cats-app&lt;/code&gt; com todo o boilerplate inicial para iniciar um projeto Snowpack e React. Voc√™ vai perceber abrindo o projeto que a estrutura √© bem parecida com a estrutura inicial do create-react-app, ent√£o se vc j√° usou create-react-app alguma vez vai estar bem familiarizado.&lt;/p&gt;
&lt;p&gt;Como disse o projeto √© muito simples e a ideia aqui n√£o √© se preocupar muito com UX, eu vou utilizar nos exemplos um pouco de Taiwlind s√≥ pra deixar um pouquinho mais bonitinho, mas sendo sincero nem precisava. Basicamente nosso projeto vai conter um bot√£o para buscar uma nova imagem, mensagem de loading ou quando algum erro acontecer e uma imagem que vai ser rederizada quando buscarmos uma nova foto de gatinho.&lt;/p&gt;
&lt;p&gt;Iniciando o projeto, entre na pasta &lt;code&gt;cats-app&lt;/code&gt; e rode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;yarn&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos entrar no nosso app.js e remover tudo deixando o arquivo assim:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;React&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;react&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;export&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tamb√©m vamos ir em &lt;code&gt;public/index.html&lt;/code&gt; e importar o Tawilind, lembrando que essa n√£o √© a melhor maneira de utiliz√°-lo pois dessa forma estamos importando o c√≥digo inteiro e vamos utilizar nem 10% das classes dispon√≠veis. Mas o prop√≥sito aqui n√£o √© pensar em uma aplica√ß√£o perform√°tica, ent√£o serve muito bem para exemplos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;link&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Utilizando nossa machine do exemplo anterior:&lt;/h3&gt;
&lt;p&gt;Primeiro precisamos instalar o xstate e @xstate/react&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;yarn&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;xstate&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;@xstate&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;react&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos agora criar um arquivo src/app-machine.js, que vai conter a nossa machine que criamos no post anterior.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;assign&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;xstate&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;export&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;AppMachine&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;initial&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;states&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;invoke&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;onDone&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;resetRetryTimes&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;onError&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;RETRY&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;incrementRetryTimes&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;cond&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;canRetry&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       ]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;https://api.thecatapi.com/v1/images/search&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;headers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;x-api-key&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;sua-api-key&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;assign&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;resetRetryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;assign&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;incrementRetryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;assign&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;guards&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;canRetry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voc√™ tamb√©m vai precisar ir no site &lt;a href=&quot;https://thecatapi.com&quot;&gt;thecatapi.com&lt;/a&gt; e gerar uma API key. Voc√™ deve substituir &lt;code&gt;sua-api-key&lt;/code&gt; pelo valor real na linha 51.&lt;/p&gt;
&lt;p&gt;Se voc√™ est√° confuso como a machine funciona ou n√£o leu a s√©rie inteira volte no post modelando sua primeira aplica√ß√£o onde montamos essa state machine do zero.&lt;/p&gt;
&lt;p&gt;Agora vamos voltar ao nosso app.js e vamos importar useMachine hook e nossa machine para que possamos utilizala no nosso app:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;React&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;react&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;useMachine&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;@xstate/react&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;AppMachine&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;./app-machine&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;send&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;useMachine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;AppMachine&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;export&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voc√™ consegue ver que useMachine hook retorna um array com dois items, o primeiro √© tudo relacionado ao nosso estado atual + algumas fun√ß√µes √∫teis que podemos utilizar durante o desenvolvimento. O segundo √© o metodo que chamamos de send, que √© utilizado para enviar eventos para a machine, bem parecido com um dispatch do Redux.&lt;/p&gt;
&lt;p&gt;Agora vamos montar nosso render, a princ√≠pio precisamos de um simples bot√£o que envia  o evento &lt;code&gt;LOAD_NEW_PICTURE&lt;/code&gt; para nossa machine: o c√≥digo ficaria assim:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;React&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;react&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;useMachine&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;@xstate/react&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;AppMachine&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;./app-machine&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;send&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;useMachine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;AppMachine&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;button&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;={&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;send&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      get new picture&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  )&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;export&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora n√≥s precisamos tratar na nossa UI os quatro estados poss√≠veis que nossa machine pode ter que √© loading, success, errror, cant_retry. A fins did√°ticos vamos colocar tudo no render do App.js poderiamos melhorar esse c√≥digo utilizando um pattern matching e separando cada varia√ß√£o em um componente diferente, mas o proposito aqui √© ser simples.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;React&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;react&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;useMachine&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;@xstate/react&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;AppMachine&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;./app-machine&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;send&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;useMachine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;AppMachine&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&amp;lt;button&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;={&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;send&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      buscar uma nova foto&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;matches&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;h3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text-xl text-purple-700 pt-4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;loading...&lt;/span&gt;&lt;span&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      )&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;matches&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;img&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pt-4 pr-4 object-cover w-full h-auto&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;={&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      )&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;matches&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&amp;lt;p&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text-lg text-red-700 mb-2 mt-2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Ops! algo deu errado&lt;/span&gt;&lt;span&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&amp;lt;button&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;={&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;send&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;RETRY&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;            tentar novamente&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      )&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;matches&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span&gt;N√£o √© poss√≠vel tentar novamente&lt;/span&gt;&lt;span&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      )&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  )&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;export&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nossa que tanto de IF Diel, o que est√° acontecendo? hahaha o mais legal do Xstate e State Machines no geral √© que n√≥s temos certeza que a aplica√ß√£o nunca vai estar em mais de 1 estado ao mesmo tempo. N√≥s estamos utilizando o &lt;code&gt;current.matches&lt;/code&gt; que basicamente √© uma fun√ß√£o que retorna true se o estado passado como par√¢metro der match com o estado atual da machine.&lt;/p&gt;
&lt;p&gt;Nossa aplica√ß√£o est√° praticamente pronta, e agora vem a cereja do bolo. J√° pensou em poder vizualizar seu c√≥digo e sua aplica√ß√£o no geral em realtime podendo ter certeza do que est√° acontecendo na sua aplica√ß√£o naquele momento? E mais, podendo controlar a sua aplica√ß√£o por essa representa√ß√£o visual da mesma?&lt;/p&gt;
&lt;p&gt;A poucas semanas a galera do Xstate lan√ßou o xstate/inspect, que basicamente abre um debugger da sua aplica√ß√£o representando a machine em tempo real e totalmente din√¢mico, ou seja, voc√™ consegue controlar sua aplica√ß√£o atrav√©s desse debugger. Vamos ver como isso funciona:&lt;/p&gt;
&lt;p&gt;Primeiro vamos instalar o inspect:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;yarn&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;@xstate&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;inspect&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No nosso app.js vamos importar e iniciar a config inicial:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;inspect&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@xstate/inspect&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;inspect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://statecharts.io/inspect&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E no nosso useMachine hook, vamos colocar um segundo parametro &lt;code&gt;{ devTools: true }&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;current&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;send&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;useMachine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;AppMachine&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;devTools&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora voltamos pra nossa aplica√ß√£o e voc√™ vai ver que ao renderiz√°-la novamente o xstate/inspect vai abrir uma nova aba renderizando a sua machine em realtime e voc√™ pode tanto usar a sua aplica√ß√£o e ver os resultados disso na aba do inspect quanto ao contr√°rio, voc√™ pode enviar eventos do inspect para a sua aplica√ß√£o.&lt;/p&gt;

    
  
&lt;h3&gt;Simulando API retornando erro.&lt;/h3&gt;
&lt;p&gt;Para sirmularmos nossa api retornando erro, vamos substituir nosso service &lt;code&gt;fetchNewPicture&lt;/code&gt; pelo c√≥digo abaixo, que √© que uma promisse sendo rejeitada:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Promise&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;resolve&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;reject&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;reject&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora ao clicar em buscar uma nova foto, automaticamente vamos ser redirecionados para o estado de error. O mais legal de State Machines e da lib Xstate por ter implementado isso √© que se um evento n√£o √© tratado no estado atual, mesmo que o usu√°rio envie esse evento, nada acontece.&lt;/p&gt;
&lt;p&gt;De prop√≥sito eu deixei o bot√£o buscar uma nova foto dispon√çvel sempre, tenta clicar nele 10 mil vezes voc√™ vai ver que nada acontece pois o evento LOAD_NEW_PICTURE n√£o existe no estado de error.&lt;/p&gt;
&lt;p&gt;Podemos ver tamb√©m que nossa l√≥gica de retry times funcionou, o usu√°rio pode tentar novamente por 3 vezes, se por 3 vezes a api n√£o retornou com sucesso o usu√°rio √© enviado para o estado cant_retry que √© o estado final da nossa machine.&lt;/p&gt;

    
  
&lt;p&gt;Por hoje √© s√≥ pessoal!&lt;/p&gt;</content:encoded></item><item><title>Dicas para times remotos</title><link>https://dielduarte.dev/blog/pt-br/dicas-para-times-remotos/</link><guid isPermaLink="true">https://dielduarte.dev/blog/pt-br/dicas-para-times-remotos/</guid><description>Comunica√ß√£o ass√≠ncrona, algumas ferramentas e dicas para manter uma equipe remota baseado em minha experi√™ncia e estudos.</description><pubDate>Sun, 19 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Esse √© um material sobre comunica√ß√£o ass√≠ncrona, algumas ferramentas e dicas para manter uma equipe remota baseado em minha experi√™ncia e estudos. N√£o estamos falando de uma ci√™ncia exata e recomendo testar as dicas por algumas semanas e avaliar os resultados com a ajuda de feedbacks da equipe.&lt;/p&gt;
&lt;h2&gt;Async vs realtime&lt;/h2&gt;
&lt;p&gt;Tente manter a comunica√ß√£o ass√≠ncrona sempre que poss√≠vel, assimilar que conversas em real time s√£o como reuni√µes pode ajudar. J√° pensou ficar em reuni√£o 8 horas por dia? Em uma situa√ß√£o de extrema desorganiza√ß√£o remota isso pode acontecer, como resultado, a produtividade do time cai.&lt;/p&gt;
&lt;p&gt;Evitar usar ferramentas de chat em tempo real pode ajudar. No lugar tente ferramentas como Twist  que basicamente organiza toda a comunica√ß√£o do time por thread.&lt;/p&gt;
&lt;p&gt;Assim como todo time de desenvolvimento tem um cultura de fazer code review em alguns momentos do dia, tamb√©m ser√° necess√°rio implantar a mesma ideia para que a equipe dedique um tempo do dia para checar todas as threads em que eles est√£o participando e responder/tomar a√ß√µes se necess√°rio.&lt;/p&gt;
&lt;p&gt;Use chats em tempo real para situa√ß√µes de emerg√™ncia como um bug em produ√ß√£o, assuntos que realmente precisam de uma resposta em tempo real / situa√ß√µes do dia a dia como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ei, n√£o consigo achar onde esta documento X, pode me ajudar?&lt;/li&gt;
&lt;li&gt;Estou com um problema que n√£o consigo resolver, algu√©m livre para fazer um pair programming?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E claro, para conversas informais em grupos ou privadas&lt;/p&gt;
&lt;h3&gt;One Monday&lt;/h3&gt;
&lt;p&gt;One monday √© um conceito v√°lido principalmente para times em m√∫ltiplos timezones. O conceito consiste em entender que em uma comunica√ß√£o ass√≠ncrona em um ambiente remoto estarei sujeito a ter que esperar at√© 24 horas para receber uma resposta dependendo do timezone das pessoas envolvidas. Reafirmo a dica, em casos de situa√ß√µes urgentes usem chats em tempo real ou liga√ß√µes para parear com webcam ligada.&lt;/p&gt;
&lt;h2&gt;Converse com as pessoas certas&lt;/h2&gt;
&lt;p&gt;Se voc√™ precisa discutir algo sobre marketing, envie no grupo de marketing, crie thread apenas com as pessoas relacionadas a marketing ou relacionadas ao assunto que voc√™ precisa resolver/discutir, dessa forma evitamos distra√ß√µes desnecess√°rias para o resto do time.&lt;/p&gt;
&lt;p&gt;Receber notifica√ß√µes ou participar de todas as threads a todo momento sobre assuntos que o integrante do time n√£o precisa participar, al√©m de ser uma distra√ß√£o desnecess√°ria, muitas vezes for√ßa os integrantes a mutar ou ignorar o canal de comunica√ß√£o para que consigam focar no trabalho e como resultado, um gap de comunica√ß√£o muito maior&lt;/p&gt;
&lt;h2&gt;Crie grupos por time e/ou √°reas de conhecimento&lt;/h2&gt;
&lt;p&gt;Evite criar grupos para cada assunto ou cada tarefa que precisa ser discutida, em quest√£o de dias isso pode virar um caos e ningu√©m sabe em que grupo responder, mais uma vez aumentando o gap de comunica√ß√£o.&lt;/p&gt;
&lt;p&gt;Exemplo de grupos por time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;time dashboard&lt;/li&gt;
&lt;li&gt;time site&lt;/li&gt;
&lt;li&gt;RH&lt;/li&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exemplo de grupos por √°reas de conhecimento:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Front-end&lt;/li&gt;
&lt;li&gt;Back-end&lt;/li&gt;
&lt;li&gt;Designers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use grupos por √°reas de conhecimento para aumentar o engajamento e a troca de conhecimento ou ajudas r√°pidas. Faz muito mais sentido um front-end perguntar uma d√∫vida ou dicas de CSS em um grupo focado sobre front-end ao inv√©s de perguntar no chat geral da empresa, para apenas uma pessoa ou mesmo no grupo de back-end.&lt;/p&gt;
&lt;h2&gt;Status&lt;/h2&gt;
&lt;p&gt;Uma √≥tima maneira saud√°vel de saber quando algu√©m est√° online ou n√£o √© usando o pr√≥prio status de chats em real time. Algumas ferramentas, como Slack, permitem aos usu√°rios adicionarem status diferentes de apenas online/offline. Uma ideia que meu time atual aplica e tem funcionado muito bem s√£o os status:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;O status √© exibido ao lado do nome do usu√°rio:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;No exemplo acima, eu sei que o usu√°rio Magdiel Duarte est√° offline no momento, isso quer dizer que, mesmo ao enviar uma mensagem direta para ele a resposta n√£o vai ser instant√¢nea, e tudo bem, mande a mensagem da mesma forma e espere. Se precisar realmente de uma resposta urgente sempre mande em grupos onde mais pessoas podem ajudar.&lt;/p&gt;
&lt;h2&gt;Reuni√µes&lt;/h2&gt;
&lt;p&gt;Sempre fa√ßa reuni√µes com a webcam ligada, isso gera um engajamento maior na equipe, faz as pessoas se sentirem confort√°veis com aquele momento e manterem o foco.&lt;/p&gt;
&lt;h3&gt;C-Levels meetings&lt;/h3&gt;
&lt;p&gt;Uma das t√©cnicas apresentadas pelo livro &quot;It doesn&apos;t have to be crazy at work&quot; √© um conceito onde, 1 ou 2 dias na semana os C-levels ficam por algumas horas dispon√≠veis para reuni√µes com qualquer pessoa/time da empresa, os hor√°rios ficam p√∫blicos no calend√°rio e qualquer time/pessoa pode marcar uma reuni√£o nesse hor√°rio para disctuir sobre algum assunto. Fora desse hor√°rio fica restrigindo apenas para assuntos urgentes.&lt;/p&gt;
&lt;p&gt;Tive a oportunidade de trabalhar em uma empresa anterior a atual, onde aplicavam esse conceito e era muito bacana pois os C-levels dessa empresa participavam muito de todas as decis√µes. Lembra do conceito sobre chat em real time ser considerado reuni√£o? Imagine o dia-a-dia de um C-level tendo que responder a todo momento d√∫vidas via chat, eles simplesmente n√£o v√£o conseguir produzir nada al√©m de responder o chat.&lt;/p&gt;
&lt;h3&gt;Daily Reports&lt;/h3&gt;
&lt;p&gt;Daily reports podem ser feitas por calls com a webcam ligada ou via texto.&lt;/p&gt;
&lt;p&gt;Em um time distribu√≠do em m√∫ltiplos timezones texto acaba sendo uma boa op√ß√£o. Ferramentas como o &lt;a href=&quot;https://statushero.com/&quot;&gt;Status Hero&lt;/a&gt;  ajudam as pessoas a n√£o esquecerem de mandarem os reports e automatiza esse processo, al√©m de trazer alguns insights como produtividade geral da equipe e deixar todas as Dailys Reports documentadas em um dashboard bem interessantes.&lt;/p&gt;
&lt;p&gt;Optar por Dailys Reports via calls pode trazer ainda mais engajamento, principalmente se o dia a dia do time n√£o envolve em ter muitas reuni√µes.&lt;/p&gt;
&lt;p&gt;Nesse caso realmente vai depender de qual op√ß√£o vai deixar o time mais confort√°vel, recomendo testar as duas formas.&lt;/p&gt;
&lt;h2&gt;TIL - Today I learned&lt;/h2&gt;
&lt;p&gt;Uma das maiores reclama√ß√µes quando se migra para um regime remoto √© a troca de conhecimento, o &lt;strong&gt;Today I learned&lt;/strong&gt; √© um canal onde as pessoas da empresas compartilham conhecimento, algum post bacana sobre uma tecnologia nova, uma t√©cnica que pode ajudar em algum momento, um v√≠deo sobre uma palestra interessante. Literalmente qualquer coisa que o integrante da empresa achar que vale a pena ser compartilhado com os colegas.&lt;/p&gt;
&lt;p&gt;Apesar do nome ser &lt;strong&gt;Today I learned&lt;/strong&gt;, n√£o √© necessariamente obrigat√≥rio postar algo novo todos os dias, mas sim, quando achar que vale a pena ser compartilhado.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Uma das maiores preocupa√ß√µes pessoais quando uma pessoa migra para um trabalho remoto √© sobre visibilidade, afinal, no regime remoto √© muito d√≠ficil ter algu√©m observando como voc√™ se comporta no trabalho al√©m das suas entregas. √â v√°lido lembrar que o trabalho de uma pessoa e o qu√£o importante ela √© para a empresa vai muito al√©m de apenas entregas relacionadas diretamente ao seu cargo, aqui pode ser o lugar perfeito para aprender mais sobre as soft skills de uma pessoa de forma remota.&lt;/p&gt;
&lt;p&gt;O canal &lt;strong&gt;Thanks,&lt;/strong&gt; √© um conceito que algumas empresas aplicam onde as pessoas agradecem umas as outras publicamente por algum feito que um colega fez e a ajudou no seu trabalho. Dessa forma fica registrado de forma p√∫blica a√ß√µes que as vezes fica muito d√≠ficil observar remotamente, como ajudar um colega com um bug de forma privada, ensinar algo novo, e v√°rias outras coisas.&lt;/p&gt;
&lt;p&gt;Al√©m de criar um ambiente muito bom para se trabalhar onde as pessoas s√£o gratas umas as outras, aumentanto ainda mais o engajamento do todo como um time.&lt;/p&gt;
&lt;h2&gt;Hero&lt;/h2&gt;
&lt;p&gt;Hero √© um conceito v√°lido se o time precisa prestar suporte, seja interno ou externo. O conceito consiste em a cada per√≠odo de tempo determinado pela equipe uma pessoa √© o &lt;strong&gt;hero,&lt;/strong&gt; essa pessoa √© respons√°vel por conversar diretamenta com o time de suporte, analizar e organizar tarefas relacionadas no backlog e trabalhar para resolver os problemas.&lt;/p&gt;
&lt;p&gt;Com uma pessoa focada nisso, o resto do time pode focar em trabalhar em novas features ou grandes refactors sem interrup√ß√µes para prestar suporte. Isso √© usado para organizar melhor o tempo da equipe entre Deep e Shalow Work outros conceitos bem importantes de se estudar.&lt;/p&gt;
&lt;p&gt;Uma das minhas refer√™ncias em trabalho remoto e Deep Work √© a empresa Doist onde aplicam esses conceitos. Eles tem um blog muito bom e super recomendo a leitura principalmente dos posts sobre Deep Work e Hero + House Keeping.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doist.com/blog/deep-work/?utm_source=doist_blog&amp;amp;utm_medium=referral&amp;amp;utm_campaign=heroes_housekeeping_days&quot;&gt;https://doist.com/blog/deep-work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doist.com/blog/heroes-housekeeping-days/&quot;&gt;https://doist.com/blog/heroes-housekeeping-days/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Calend√°rio&lt;/h2&gt;
&lt;p&gt;Uma das melhores formas de se ter uma big picture sobre tudo que est√° acontecendo na empresa √© usando o calend√°rio.&lt;/p&gt;
&lt;p&gt;Especialmente recomendo o Google Calendar, nele √© poss√≠vel fazer com que todo mundo tenha acesso ao calend√°rio de todos e que de forma f√°cil consiga mandar convites para reuni√µes, por exemplo sem ter que previamente perguntar para todo mundo qual o melhor hor√°rio. Algumas empresas pedem para o time colocarem no calend√°rio principalmente quando n√£o est√£o dispon√≠veis, por exemplo:&lt;/p&gt;
&lt;p&gt;Maria sempre vai a academia as 2 pm, ela pode ent√£o nesse caso adicionar no calend√°rio um evento dizendo que n√£o est√° dispon√≠vel no hor√°rio de 2 pm - 3 pm todos os dias, ficando ao crit√©rio da Maria colocar o porque caso se sinta a vontade para ou apenas &quot;Ocupado&quot;.&lt;/p&gt;
&lt;h2&gt;Micro-managment&lt;/h2&gt;
&lt;p&gt;Muito cuidado com micro gerenciamento de pessoas, se voc√™ precisa perguntar h√° uma pessoa o que ela est√° trabalhando temos com certeza algum gap de comunica√ß√£o acontecendo. O ideal √© usar algum software de gerenciamento de tarefas ou at√© mesmo planilhas (o que o time achar melhor). Onde cada pessoa pode estar fazendo apenas uma tarefa por vez, que fique claro qual o status atual e de forma p√∫blica para todos do time.&lt;/p&gt;
&lt;h2&gt;FOMO - medo de estar perdendo algo&lt;/h2&gt;
&lt;p&gt;Esse √© um problema pessoal, que pode acontecer ou n√£o e varia muito de pessoa para pessoa. Mas a postura da empresa relacionada a isso pode ajudar a diminuir os casos a 0. Ser firme com 8 horas trabalhadas por dia e nada mais - com excess√£o a casos urgentes - √© um √≥timo come√ßo!&lt;/p&gt;
&lt;p&gt;Um cultura onde pessoas da equipe ficam online 24 horas por dia, trabalham at√© nos finais de semana n√£o pode nunca ser visto com bons olhos pela empresa e pelos l√≠deres das equipes, isso leva a um alto risco de burnout que √© um problema s√©rio de sa√∫de, e para empresa representa uma queda brusca de produtividade a m√©dio e longo prazo.&lt;/p&gt;
&lt;p&gt;Para a equipe:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tenham seus hor√°rios de trabalho e sigam a risca, manter uma rotina √© muito importante em um regime remoto.&lt;/li&gt;
&lt;li&gt;Se poss√≠vel n√£o baixem o chat da empresa em seus celulares pessoais.&lt;/li&gt;
&lt;li&gt;Configure para receber notifica√ß√µes apenas nos hor√°rios em que voc√™ esteja trabalhando.&lt;/li&gt;
&lt;li&gt;Tenha em mente que trabalho √© um processo cont√≠nuo, voc√™ pode continuar amanh√£.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>Dominando code splitting com webpack</title><link>https://dielduarte.dev/blog/pt-br/dominando-code-splitting-com-webpack/</link><guid isPermaLink="true">https://dielduarte.dev/blog/pt-br/dominando-code-splitting-com-webpack/</guid><description>Vamos conversar sobre como Webpack pode ajudar no processo de code splitting para atingir a meta de um site mais perform√°tico.</description><pubDate>Wed, 17 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Code Splitting √© um processo em build time que quebra parte do seu c√≥digo em pequenos peda√ßos que s√£o requisitados de forma ass√≠ncrona, apenas quando necess√°rio. Vamos conversar sobre como Webpack pode ajudar no processo de Code Splitting para atingir a meta de um site mais perform√°tico.&lt;/p&gt;
&lt;h2&gt;Mas primeiro, como saber quando eu tenho que quebrar o meu c√≥digo em pequenos peda√ßos (chunks)?&lt;/h2&gt;
&lt;p&gt;Os processos mais caros quando falamos sobre renderizar um Website s√£o os processos de download e parsing do Javascript e CSS. Sabendo desse fato, se n√≥s n√£o precisamos de uma parte espec√≠fica do c√≥digo no primeiro render, esse c√≥digo √© um √≥timo candidato para ser quebrado em uma outra parte e ser baixado sobre demanda.&lt;/p&gt;
&lt;p&gt;O Google Chrome tem uma √≥tima ferramenta chamada &lt;code&gt;coverage&lt;/code&gt; que nos mostra qual porcentagem do c√≥digo baixado est√° ou n√£o est√° sendo usado. Isso pode ser usado como uma m√©trica para seguir e saber o quanto do c√≥digo baixado poderia ser quebrado em partes ass√≠ncronas.&lt;/p&gt;
&lt;p&gt;Para usar essa ferramenta abra o dev tools do Chrome, &lt;code&gt;cmd/ctrl + p&lt;/code&gt;, e digite &lt;code&gt;show coverage&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Uma vez que abrimos a op√ß√£o coverage, clique no bot√£o de reload e espere at√© que nosso site seja completamente carregado. Os resultados v√£o nos motrar o quanto do c√≥digo carregado por arquivo est√° sendo usado. √â maravilhoso! Ôòç&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;No exemplo abaixo, 46% do c√≥digo entregue &lt;code&gt;n√£o&lt;/code&gt; est√° sendo usado, essa m√©trica tamb√©m √© relativa, dependende do tamanho do arquivo e de muitas outras vari√°veis. Ent√£o √© sempre bom entender o contexto que estamos trabalhando quando estivermos usando essas ferramentas.&lt;/p&gt;
&lt;h2&gt;Code splitting e webpack&lt;/h2&gt;
&lt;p&gt;Com Webpack nos temos duas formas de trabalhar com Code Splitting, imports est√°ticos e din√¢micos. As duas formas usam &lt;a href=&quot;https://v8.dev/features/dynamic-import&quot;&gt;dynamic imports, uma feature do es2020&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Imports est√°ticos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;√â bom para ser usado quanto estivermos importando bibliotecas/m√≥dulos de Javascript pesados.&lt;/li&gt;
&lt;li&gt;Qualquer parte do c√≥digo que chamamos de temporal, ou seja, coisas que n√£o s√£o v√≠siveis todo o tempo na sua p√°gina, exemplos: tooltips, modais/alertas.&lt;/li&gt;
&lt;li&gt;Rotas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para usar imports est√°ticos no seu c√≥digo, √© muito simples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;path/to/myModule.js&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou ainda melhor, criando uma fun√ß√£o que importa o m√≥dulo quando necess√°rio. O import do arquivo √© feito apenas uma vez, depois da primeira √© cacheado e na pr√≥xima vez que usar a fun√ß√£o o m√≥dulo √© retornado instantaneamente, exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;getModule&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; () ‚áí &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;path/to/myModule.js&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;getModule&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Imports Dinamicos&lt;/h3&gt;
&lt;p&gt;Imports din√¢micos n√£o s√£o de verdade din√¢micos, porque eles acontecem em build time. Ao usar imports din√¢micos estamos dizendo para o Webpack: Ei Webpack, por favor, crie todos os chunks poss√≠veis para o caminho que eu estou te passando, seja uma pasta, ou v√°rias em build time. Dessa forma nos conseguimos usar vari√°veis o que torna esse processo de import &quot;din√¢mico&quot;.&lt;/p&gt;
&lt;p&gt;Vamos considerar que n√≥s temos uma pasta de temas, ex:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;themes&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  ‚îî‚îÄ‚îÄ &lt;/span&gt;&lt;span&gt;dark&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  ‚îî‚îÄ‚îÄ &lt;/span&gt;&lt;span&gt;light&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como exemplo n√≥s poderiamos importar os temas assim:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;getTheme&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt;) ‚áí &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;path/to/themes/&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;getTheme&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;dark&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dessa forma o Webpack vai criar todos os poss√≠veis chunks em build time para cada tema dentro da pasta &lt;code&gt;themes&lt;/code&gt;, essa t√©cnica √© chamada de &lt;code&gt;ContextModule&lt;/code&gt; dentro do c√≥digo do Webpack.&lt;/p&gt;
&lt;h2&gt;Coment√°rios M√°gicos&lt;/h2&gt;
&lt;h3&gt;webpackChunkName&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/* webpackChunkName: &quot;my-chunk-name&quot; */&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;path/to/myModule.js&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por default o Webpack cria os nomes dos chunks seguindo uma ordem num√©rica, 1.js, 2.js, 3.js, o que torna o processo de reconhecer quais arquivos foram importados dif√≠cil. Usando &lt;code&gt;webpackChunkName&lt;/code&gt; n√≥s podemos renomear o chunk, √© importante lembrar que para esse coment√°rio m√°gico funcionar n√≥s devemos estar usando &lt;code&gt;output.chunkFileName: [name].whateverDoYouWantHere.js&lt;/code&gt; no arquivo de configura√ß√£o do Webpack.&lt;/p&gt;
&lt;p&gt;Isso √© √∫til apenas no modo de desenvolvimento, ent√£o podemos fazer algo do tipo ao importar o arquivo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;process&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NODE_ENV&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;development&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/* webpackChunkName: &quot;my-chunk-name&quot; */&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;path/to/myModule.js&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;path/to/myModule.js&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O &lt;code&gt;if&lt;/code&gt; vai ser removido se o build estiver sendo rodado em modo de produ√ß√£o, e o &lt;code&gt;else&lt;/code&gt; se estiver rodando em modo de desenvolvimento. Isso √© conhecido como &lt;code&gt;dead-code elimination&lt;/code&gt; ou em pt-br elimina√ß√£o do c√≥digo morto, ferramentas como Uglify.js e outras usam isso para reduzir o tamanho do arquivo final.&lt;/p&gt;
&lt;h3&gt;webpackMode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/* webpackMode: &quot;lazy&quot; */&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;path/to/themes/&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O coment√°rio m√°gico &lt;code&gt;webpackMode&lt;/code&gt; pode receber 4 tipos de valores:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lazy: gera um chunk para cada arquivo importado dinamicamente, melhor op√ß√£o para ser usado em produ√ß√£o.&lt;/li&gt;
&lt;li&gt;lazy-once: gera um chunk apenas que pode satisfazer a condi√ß√£o do import din√¢mico, melhor op√ß√£o para o modo de desenvolvimento reduzindo o tempo de de gerar os arquivos finais do Webpack.&lt;/li&gt;
&lt;li&gt;eager: n√£o gera nenhum chunk extra, todos os m√≥dulos s√£o gerados em apenas um arquivo e nenhum request extra √© feito.&lt;/li&gt;
&lt;li&gt;weak: √∫til para universal rendering / ou server side rendering, onde os arquivos s√£o servidos manualmente no primeiro render. O que acontece √© que ao requisitar um m√≥dulo uma promisse √© sempre retornada, mas essa promisse s√≥ retorna com sucesso se requisitada pelo client side. Um novo request nunca √© feito, pois os arquivos j√° est√£o no client pois foram servidos pelo servidor.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Prefetch e Preload&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/* webpackPrefetch: true */&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;path/to/themes/&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/* webpackLoad: true */&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;path/to/themes/&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;theme&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Os dois coment√°rios m√°gicos, ir√£o criar uma tag link com &lt;code&gt;rel=prefetch&lt;/code&gt; ou &lt;code&gt;rel=preload&lt;/code&gt; automaticamente para voc√™ fazer o prefetching ou preloading dos seus chunks dependendo da implementa√ß√£o. Se voc√™ n√£o sabe o que prefetch e preload links fazem, eu recomendo
a leitura do post &lt;a href=&quot;https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf&quot;&gt;Preload, Prefetch And Priorities in Chrome&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Essas foram minhas anota√ß√µes do curso &lt;a href=&quot;https://frontendmasters.com/courses/performance-webpack/&quot;&gt;Web performance with webpack&lt;/a&gt;. Espero que voc√™ tenha aprendido alguma coisa nova hoje, te vejo no pr√≥ximo post! ‚ù§Ô∏è&lt;/p&gt;</content:encoded></item><item><title>Introdu√ß√£o a state charts em aplica√ß√µes web</title><link>https://dielduarte.dev/blog/pt-br/introducao-a-state-charts-em-aplicacoes-web/</link><guid isPermaLink="true">https://dielduarte.dev/blog/pt-br/introducao-a-state-charts-em-aplicacoes-web/</guid><description>Era uma vez um Front-end que n√£o conhecia State Chartse e tinha uma tarefa muito &quot;simples&quot;...</description><pubDate>Sun, 01 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Era uma vez um Front-end que n√£o conhecia State Charts e tinha uma tarefa muito &quot;simples&quot;, construir um componente de input. O  &quot;simples&quot; input para edi√ß√£o de um nome tinha algumas varia√ß√µes de estados:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;inicial&lt;/code&gt;: O input aparece desabilitado, o usu√°rio pode ent√£o clicar no √≠cone de editar.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;editando&lt;/code&gt;: O input est√° habilitado para receber o novo valor de nome, o usu√°rio pode ent√£o clicar no √≠cone de salvar.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;salvando&lt;/code&gt;: No lugar dos √≠cones de editar/salvar mostramos um loading sinalizando que alguma a√ß√£o ass√≠ncrona est√° acontecendo, nesse caso, estamos salvando o novo valor de nome.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;Nosso querido Front-end come√ßou a implementa√ß√£o com duas vari√°veis boleanas:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E uma fun√ß√£o de &lt;em&gt;&lt;strong&gt;onClick&lt;/strong&gt;&lt;/em&gt; que recebia por parametro os valores de &lt;code&gt;isEditing&lt;/code&gt; e &lt;code&gt;isSaving&lt;/code&gt;.  Seu pensamento foi: A primeira vez que a fun√ß√£o de onClick for chamada, estamos no estado inicial, logo preciso enviar o usu√°rio para o estado de &lt;em&gt;&lt;strong&gt;editando&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Ao chegar no estado de edi√ß√£o e sabendo que o usu√°rio poderia novamente clicar no √≠cone que dessa vez se transformava no √≠cone para salvar, o mesmo continuou sua implementa√ß√£o adicionando mais um trecho c√≥digo na fun√ß√£o de &lt;em&gt;&lt;strong&gt;onClick&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;saveName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O trecho de c√≥digo adicionado primeiro testa se o usu√°rio est√° no estado de &lt;em&gt;&lt;strong&gt;edi√ß√£o&lt;/strong&gt;&lt;/em&gt;, caso verdadeiro, faz o switch das vari√°veis para levar o usu√°rio para o estado de &lt;em&gt;&lt;strong&gt;salvando&lt;/strong&gt;&lt;/em&gt;, e logo em seguida faz um request na api para salvar o novo valor de nome. Ao receber um retorno da api, resetamos as duas vari√°veis boleanas para false, pois agora, o usu√°rio n√£o est√° editando e nem salvando um novo valor, o que supostamente levaria o usu√°rio para o estado &lt;em&gt;&lt;strong&gt;inicial&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;N√£o muito confiante na solu√ß√£o, deu a task como terminada e seguiu sua vida.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;...Era uma vez um designer, que esqueceu de trabalhar no estado de erro do &quot;simples&quot; componente de input.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;‚ÄúHey dev, Esqueci de um detalhe, n√£o tratamos o estado de erro do input. Quando der erro, volta pro estado de edi√ß√£o por que o cliente pode tentar salvar novamente.‚Äù&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mesmo sabendo que a solu√ß√£o atual n√£o era a ideal, continuou com a mesma implementa√ß√£o para adicionar o estado de erro, agora, ao inv√©s de 2 vari√°veis boleanas, seriam tr√™s:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;isError&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essa pequena adi√ß√£o resultou na fun√ß√£o de onClick abaixo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;isError&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;isError&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;saveName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;isError&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;isSaving&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;isEditing&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Task concluida novamente.
Desconfort√°vel com a solu√ß√£o final, foi pesquisar. Afinal, qual o problema com vari√°veis boleanas?&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;O problema √© que como na imagem acima, apesar de parecer inofensiva e √≥bvio, 1 vari√°vel boleana representa duas varia√ß√µes. O por√©m que ningu√©m lembra √© que adicionando mais de uma vari√°vel, suas varia√ß√µes crescem exponencialmente. Com tr√™s vari√°veis boleanas como no exemplo acima, temos 8 varia√ß√µes.&lt;/p&gt;
&lt;p&gt;E a√≠, voc√™ acha que o c√≥digo acima est√° preparado para lidar com 8 varia√ß√µes? A resposta infelizmente √©: n√£o. Seu c√≥digo pode parecer simples e estar 99% vuner√°vel a bugs.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Sabendo disso, podemos fazer diferente, podemos mapear todos os estados em uma constante:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;IDLE&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;IDLE&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;EDITING&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;EDITING&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;SAVING&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;SAVING&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;ERROR&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;ERROR&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos tamb√©m criar um objeto que nos diga qual o estado atual e qual o pr√≥ximo estado, exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nextState&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IDLE&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EDITING&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EDITING&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SAVING&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SAVING&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IDLE&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ERROR&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ERROR&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SAVING&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Limitaremos ent√£o o estado do input para apenas UM estado por vez:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;inputState&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IDLE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E nossa fun√ß√£o de onClick receberia apenas o nosso estado atual por par√¢metro, e usando o objecto nextState, saberiamos qual o pr√≥ximo estado dever√≠amos mover nosso componente. Exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;currentInputState&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;currentInputState&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EDITING&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;saveName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;currentInputState&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nextState&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;saving&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;currentInputState&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nextState&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;stateType&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;saving&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	  &lt;/span&gt;&lt;span&gt;currentInputState&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nextState&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;currentInputState&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos resumir nossa hist√≥ria em problema e solu√ß√£o:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Problema:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Manter o estado usando vari√°veis condicionais ficou confuso, al√©m de obrigar a tratar todos os edge cases e rezar para que o estado n√£o ca√≠sse em poss√≠veis combina√ß√µes que n√£o foram tratadas.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Solu√ß√£o:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ter um √∫nico estado por vez e definir as transi√ß√µes entre estados atrav√©s de um evento.&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;Nossa solu√ß√£o tem um nome: &lt;code&gt;Finite State Machines&lt;/code&gt;, mas a final oq √© Finite State Machines?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Uma M√°quina de estados finita (Finite State Machines ou FSM) √© um modelo matem√°tico usado para representar programas de computadores ou circuitos l√≥gicos. O conceito √© concebido como uma m√°quina abstrata que deve estar em &lt;strong&gt;UM&lt;/strong&gt; de um n√∫mero finito de estados.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;source: &lt;a href=&quot;https://pt.wikipedia.org/wiki/M%C3%A1quina_de_estados_finita&quot;&gt;https://pt.wikipedia.org/wiki/M√°quina_de_estados_finita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uma forma bem simples de representar FSM √© usando um diagrama de transi√ß√£o de estados, onde o conseguimos vizualizar todo o fluxo de transi√ß√£o de estados por exemplo:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;come√ßando em um estado A ‚áí um vento X aconteceu ‚áí vamos para um estado B&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Finite State Machines? State charts? que confus√£o!&lt;/h3&gt;
&lt;p&gt;Quando come√ßamos a estudar mais sobre Finete State Machines vamos sempre nos deparar com um outro nome que √© &lt;code&gt;State Charts&lt;/code&gt;, mas a prop√≥sito qual a grande diferen√ßa entre eles?&lt;/p&gt;
&lt;p&gt;Como qualquer solu√ß√£o, Finite State Machines por s√≠ s√≥ tem alguns problemas, geralmente acabam com um grande n√∫mero de estados, muitos deles com transi√ß√µes id√™nticas, tornando muito verboso e de dif√≠cil manuten√ß√£o. Este √© o famoso problema conhecido como explos√£o de estados.&lt;/p&gt;
&lt;p&gt;State Charts por sua vez, apareceu pouco tempo depois adicionando solu√ß√µes para que FSM fossem mais escal√°vel a medida que o seu sistema fosse crescendo e ficando mais complexo. Al√©m de novas ideias para tornar sua vida mais f√°cil.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Vale lembrar que a ideia foi apresentada h√° mais de 20 anos atr√°s, al√©m de ser uma das bases da computa√ß√£o, √© usada largamente em hardware embarcados e games! Com o aparecimento da lib Xstate que vamos descobrir no pr√≥ximo post, o uso na web e pricipalmente usando Javascript est√° crescendo cada vez mais. Apenas para deixar um gostinho do que vamos ver no pr√≥ximo artigo e tamb√©m sobre uma das maiores vantagens de se usar State Charts que √© o poder de vizualizar seu c√≥digo, d√° uma olhada como ficaria nosso codigo do componente de input usando Xstate:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://xstate.js.org/viz/?gist=d73e129d583ac4a0ba956736e68dbdd2&quot;&gt;https://xstate.js.org/viz/?gist=d73e129d583ac4a0ba956736e68dbdd2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;N√£o se preocupe se n√£o entendeu o c√≥digo, vamos aprender tudo sobre o uso de Xstate e State Charts em uma aplica√ß√£o real no pr√≥ximo artigo!&lt;/p&gt;
&lt;h3&gt;Estado? √â tipo redux?&lt;/h3&gt;
&lt;p&gt;Quando trabalhamos com State Charts, os famosos estados n√£o s√£o os estados din√¢micos ou relacionados a dados de uma aplica√ß√£o e sim em qual cen√°rio de uma possibilidade finita e pr√© estabelecida uma aplica√ß√£o est√°, lembre-se da regra de ouro, uma aplica√ß√£o pode estar em UM √∫nico estado por vez. Exemplo:&lt;/p&gt;
&lt;p&gt;Sua aplica√ß√£o pode estar no estado de loading e ter um contexto &lt;code&gt;user=null&lt;/code&gt;, em uma pr√≥ximo momento sua aplica√ß√£o estaria em um estado de logado e ter um contexto &lt;code&gt;user={ id: 1, name:  &apos;Diel&apos; }&lt;/code&gt;. Com esse exemplo fica f√°cil assimilar que o estado como estamos acostumados no Redux ou outras op√ß√µes s√£o chamados de contexto no mundo dos statecharts.&lt;/p&gt;
&lt;p&gt;Te vejo no pr√≥ximo post, onde vamos aprender a como modelar uma aplica√ß√£o utilizando State Charts e Xstate.&lt;/p&gt;</content:encoded></item><item><title>Modelando sua primeira aplica√ß√£o com Statecharts e Xstate</title><link>https://dielduarte.dev/blog/pt-br/modelando-sua-primeira-aplicacao-com-statecharts-e-xstate/</link><guid isPermaLink="true">https://dielduarte.dev/blog/pt-br/modelando-sua-primeira-aplicacao-com-statecharts-e-xstate/</guid><description>Nesse e nos pr√≥ximos posts vamos contruir uma aplica√ß√£o utilizando Statecharts e a ajuda da lib Xstate...</description><pubDate>Sun, 22 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Nesse e nos pr√≥ximos posts vamos contruir uma aplica√ß√£o utilizando Statecharts e a ajuda da lib Xstate. Os posts ser√£o quebrados em 2 partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O post que voc√™ est√° lendo ser√° como modelar sua aplica√ß√£o utilizando Statecharts e Xstate/Viz onde vamos cubrir alguns dos principais conceitos de Statecharts.&lt;/li&gt;
&lt;li&gt;Escrevendo sua aplica√ß√£o com React e Xstate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sem mais delongas, bora pro post de hoje!&lt;/p&gt;
&lt;p&gt;Antes de come√ßarmos a modelar uma aplica√ß√£o, precisamos entender um pouco mais sobre alguns dos conceitos de Statecharts, vale lembrar tamb√©m que todos os exemplos ser√£o usando Xstate mas voc√™ n√£o precisa de nenhuma lib para come√ßar usar hoje mesmo. Durante o desenvolvimento do modelo, vamos cobrir os seguintes conceitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;context&lt;/li&gt;
&lt;li&gt;state&lt;/li&gt;
&lt;li&gt;invoke&lt;/li&gt;
&lt;li&gt;actions&lt;/li&gt;
&lt;li&gt;guards&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Uma das features mais legais do Xstate √© poder vizualizar seu c√≥digo, hoje vamos usar o xstate/viz que vai nos ajudar a criar nosso modelo. Antes de mais nada, abra o seguinte link: xstate/viz , voc√™ provavelmente ver√° uma p√°gina igual a da imagem abaixo, ele ir√° iniciar com uma fetch machine e com o c√≥digo do exemplo do lado direito.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;A primeira coisa que vamos fazer √© atualizar o c√≥digo no Xstate/Viz para o c√≥digo abaixo e clicar em update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;initial&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;states&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O c√≥digo acima √© o c√≥digo basico para iniciarmos uma nova State Machine, cada state machine recebe um id √∫nico, um estado inicial e claro, a lista de estados dispon√≠veis. O resultado ser√°:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;A primeira coisa a se fazer √© pensar em quais estados nossa aplica√ß√£o pode ter, nesse exemplo vamos criar uma aplica√ß√£o que, ao clicar em um bot√£o busca de uma API uma imagem de um gatinho. A aplica√ß√£o tamb√©m tratar√° errors na api, habilitando o usu√°rio a tentar novamente por 3 vezes consecutivas caso a API retorne errors.&lt;/p&gt;
&lt;p&gt;Com essa breve descri√ß√£o podemos ent√£o dizer que nossa aplica√ß√£o ter√° os seguintes estados:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;idle&lt;/li&gt;
&lt;li&gt;loading&lt;/li&gt;
&lt;li&gt;success&lt;/li&gt;
&lt;li&gt;error&lt;/li&gt;
&lt;li&gt;cant_retry&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O resultado em c√≥digo ficaria assim:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;initial&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;states&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E o resultado no xstate/viz:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;N√£o se preocupe caso voc√™ esque√ßa de algum estado da primeira vez, aos poucos e com pr√°tica voc√™ vai pegando maldade e vai conseguir ser mais assertivo em quais estados sua aplica√ß√£o ou seu componente deve ter. Alterar caso precise √© mais simples do que parece, voc√™ pode usar o xstate/viz para te ajudar a vizualizar as mudan√ßas e testar todos os fluxos poss√≠veis.&lt;/p&gt;
&lt;p&gt;Lembra do nosso diagrama de transi√ß√£o de estados falado no primeiro post dessa s√©rie, onde mostramos que come√ßando em um estado A ‚áí um vento X aconteceu ‚áí vamos para um estado B ? O pr√≥ximo passo √© definir quais eventos dentro do seu sistema for√ßa uma transi√ß√£o de estado. Exemplo, quando estamos no estado inicial (&lt;strong&gt;idle)&lt;/strong&gt; podemos dizer que o evento &lt;strong&gt;LOAD_NEW_PICTURE&lt;/strong&gt; for√ßa uma transi√ß√£o para o estado &lt;strong&gt;loading&lt;/strong&gt; ou seja:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;idle ‚áí LOAD_NEW_PICTURE ‚áí loading&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loading ‚áí ON_DONE ‚áí sucess&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loading ‚áí ON_ERROR ‚áí error&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;success ‚áí LOAD_NEW_PICTURE ‚áí loading&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;error ‚áí RETRY ‚áí loading&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Em c√≥digo ficaria:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;initial&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;states&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;ON_DONE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;ON_ERROR&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;RETRY&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;e no xstate/viz:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Vizualizar seu c√≥digo √© muito interessante, no exemplo acima, podemos ver nitidamente qual evento leva a aplica√ß√£o para outro estado e todos os fluxos poss√≠veis. E inclusive furos no sistema, veja como o estado cant_retry nunca acontecer√° pois nenhum evento for√ßa uma transi√ß√£o at√© ele ü§∑‚Äç‚ôÇÔ∏è mas calma, n√≥s vamos chegar l√°.&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;Context √© uma feature da lib Xstate que ter permite salvar contextos din√¢micos dependendo do estado que sua aplica√ß√£o est√°. Context nesse caso √© o nosso famoso estado como estamos acostumados a usar com outras libs como Redux, Mobx, Context Api no caso de usar com React, ou at√© mesmo um simples componente state.&lt;/p&gt;
&lt;p&gt;Nesse caso, nosso contexto ser√° a nossa foto atual para ser exibida e a quantidade de vezes que o usu√°rio tentou buscar uma nova foto em caso de erros, precisamos iniciar nossa machine com o contexto inicial, o c√≥digo ent√£o ficaria dessa forma:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;initial&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	    &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;states&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;ON_DONE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;ON_ERROR&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;RETRY&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perceba que nesse caso, n√£o temos nenhuma altera√ß√£o nos estados da aplica√ß√£o. Mas no xstate/viz se voc√™ abrir a aba chamada &lt;code&gt;State&lt;/code&gt; voc√™ pode ver que ele te mostra qual o estado atual da aplica√ß√£o e qual os valores do contexto naquele momento.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Trabalhando com a√ß√µes ass√≠ncronas&lt;/h3&gt;
&lt;p&gt;Em qualquer aplica√ß√£o sempre teremos a√ß√µes que s√£o ass√≠ncronas e os resultados dessas a√ß√µes podem ou n√£o resultar em uma transi√ß√£o de estado. Usando Xstate chamamos isso de Services, e chamar um servi√ßo √© t√£o f√°cil e declarativo quanto qualquer outro conceito.&lt;/p&gt;
&lt;p&gt;No nosso exemplo, o servi√ßo ser√° uma promise que vai fazer o request para buscar uma nova foto. O resultado dessa promise, se com sucesso ou erro gerara transi√ß√µes de estados. Pensando em um fluxo de dados quando a aplica√ß√£o sai do estado de ocioso(idle) para loading √© nesse momento que devemos ent√£o fazer nosso request. Preste bem aten√ß√£o no estado de loading no proximo exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;initial&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	    &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;states&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;invoke&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;onDone&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;onError&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;RETRY&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Substitu√≠mos nossos eventos por uma key chamada &lt;strong&gt;invoke,&lt;/strong&gt; que recebe nesse exemplo, 3 configura√ß√µes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;src&lt;/strong&gt;:  √â uma fun√ß√£o que retorna uma promisse. No nosso c√≥digo estamos passando apenas o nome da fun√ß√£o que ser√° chamada  e como segundo par√¢metro da fun√ß√£o &lt;strong&gt;Machine&lt;/strong&gt;, passamos um objeto com a key &lt;strong&gt;services&lt;/strong&gt; que nada mais √© que outro objeto com todos os servi√ßos que podem ser chamados.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;onDone&lt;/strong&gt;: Qual o pr√≥ximo estado vamos redirecionar nossa machine se tudo ocorrer bem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;onError&lt;/strong&gt;: Qual o pr√≥ximo estado vamos redirecionar nossa machine se algum erro acontecer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vale lembrar que um servi√ßo pode ser uma promisse, observables, callback ou outra machine.&lt;/p&gt;
&lt;p&gt;A vizualiza√ß√£o do nosso c√≥digo ficaria assim:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Da pra perceber que o viz coloca invoke / nome do servi√ßo dentro da quadradinho que representa o estado atual e tamb√©m o nome do servi√ßo dentro de um par√™nteses nos eventos simbolizando que aquele evento est√° relacionado ao servi√ßo chamado.&lt;/p&gt;
&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;Actions s√£o fun√ß√µes do tipo fire-and-forget, ou seja, fun√ß√µes  que n√£o geram uma transi√ß√£o de estados. As actions por√©m, s√£o muito usadas para rodar qualquer tipo de side effect que podem atualizar nosso contexto.&lt;/p&gt;
&lt;p&gt;No nosso exemplo, quando a promisse que busca uma nova foto retorna precisamos chamar uma action para atualizar o valor do nosso contexto currentImageUrl.&lt;/p&gt;
&lt;p&gt;Qualquer transi√ß√£o de estado dentro do Xstate pode receber apenas uma string com o nome do novo estado ou um objeto de configura√ß√£o, onde passamos o target que representa o pr√≥ximo estado e outras configura√ß√µes como por exemplo, uma action. Nesse caso vamos alterar nosso invoke objeto para:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;invoke&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  src&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  onDone&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  onError&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perceba que passamos apenas uma string que √© refer√™ncia para uma fun√ß√£o action, tamb√©m vamos passar a action no segundo parametro da fun√ß√£o Machine, dessa forma, eu acredito que fica mais simples de ler nossa machine. O c√≥digo final ficaria assim:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;initial&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	    &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;states&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;invoke&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;onDone&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				    &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				    &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;onError&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;RETRY&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;imageUrl&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uma action recebe por par√¢metro, o contexto atual e um event, esse event nada mais √© do que o retorno do servi√ßo, como nosso servi√ßo nesse caso √© uma promisse, nosso event ser√° o retorno dela. Caso nosso servi√ßo fosse um callback por ex, esse event seria a chamada do callback com qualquer informa√ß√£o adicional que o servi√ßo queira passar para a action.&lt;/p&gt;
&lt;p&gt;A vizualiza√ß√£o do c√≥digo ficaria assim:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Perceba que o Viz coloca uma lista de a√ß√µes que acontecem quando um evento √© disparado com do / nome da action bem abaixo da representa√ß√£o visual de um evento.&lt;/p&gt;
&lt;p&gt;Seguindo nosso exemplo, sempre que a promisse retornar um erro e o usu√°rio envia o evento RETRY devemos incrementar o valor de retryTimes no nosso contexto,  tamb√©m devemos resetar esse valor caso a promisse retorne com sucesso. Nesse caso, vamos adiconar uma action quando chamamos o evento RETRY e outra quando a promisse retorna com sucesso:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;initial&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	    &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;states&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;invoke&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;onDone&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				    &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				    &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;resetRetryTimes&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;onError&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;RETRY&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;: [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;incrementRetryTimes&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;imageUrl&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;resetRetryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;incrementRetryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A vizualiza√ß√£o do c√≥digo ficaria assim:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Agora voc√™ j√° sabe reconhecer quando uma action √© chamada apenas olhando a vizualiza√ß√£o do c√≥digo üöÄ.&lt;/p&gt;
&lt;h3&gt;Guards&lt;/h3&gt;
&lt;p&gt;Guards s√£o usados para garantir que uma transi√ß√£o de estado que depende de alguma regra de negocio seja feita com seguran√ßa, usando o nosso exemplo, quando a promisse que busca uma nova foto retorna um erro, o usu√°rio pode tentar buscar novamente por 3 vezes. Ao tentar 3 vezes e sem sucesso, o usu√°rio √© ent√£o redirecionado para um estado onde ele n√£o pode mais tentar buscar uma nova foto.&lt;/p&gt;
&lt;p&gt;Para fazer isso acontecer iremos usar os guards, o jeito de configurar um guard √© bem simples, no nosso caso, o evento RETRY vai conter duas poss√≠veis branchs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;  error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        RETRY&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;incrementRetryTimes&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       ]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nesse caso nada acontece, pois ainda n√£o adicionamos o nosso guard, para adicionar um ou mais guards basta colocar uma key cond na branch que deve ser redirecionada apenas se o guard retornar true. As branchs s√£o sempre lidas por ordem que foram declaradas, ou seja, nesse caso vamos colocar nosso guard na primeira branch, caso o retorno do guard seja falso iremos ent√£o para a pr√≥xima op√ß√£o que vai ent√£o for√ßar uma transi√ß√£o de estado para o estado cant_retry,  nosso c√≥digo ficaria assim:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;  error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        RETRY&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;incrementRetryTimes&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;cond&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;canRetry&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       ]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Novamente usamos a string para referenciar ao nome da fun√ß√£o guard que estar√° no segundo par√¢metro do m√©todo Machine, c√≥digo final ficaria assim:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;initial&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	    &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;states&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;invoke&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;onDone&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				    &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				    &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;resetRetryTimes&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;onError&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;RETRY&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	          &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;incrementRetryTimes&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	          &lt;/span&gt;&lt;span&gt;cond&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;canRetry&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	       ]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;imageUrl&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;resetRetryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;incrementRetryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;guards&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;canRetry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Perceba que agora nosso estado cant_retry tem uma liga√ß√£o com o evento Retry, e n√≥s temos dois eventos Retry que representam por ordem as branchs que declaramos. Perceba tamb√©m que a primeira branch dentro do evento tem um array de guards e os nomes dessas condi√ß√µes, um guard fica verde em caso retorne true e vermelho em caso retorne false representando que aquele evento n√£o vai acontecer.&lt;/p&gt;
&lt;h3&gt;Type final&lt;/h3&gt;
&lt;p&gt;Estados do tipo final, representam que aquela machine est√° terminada, ou seja, nenhum evento ou transi√ß√£o ir√° acontecer depois que a machine chegar a esse estado. No nosso exemplo, o estado cant_retry √© nosso estado final. Vale lembrar que uma machine n√£o necessariamente precisa ter um estado final.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;catsApp&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;initial&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	    &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;states&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;idle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;invoke&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;onDone&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				    &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				    &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;resetRetryTimes&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;				  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;onError&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;LOAD_NEW_PICTURE&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;RETRY&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	          &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;incrementRetryTimes&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	          &lt;/span&gt;&lt;span&gt;cond&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;canRetry&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	          &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	       ]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;cant_retry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;fetchNewPicture&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;actions&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;setCurrentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;currentImageUrl&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;imageUrl&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;resetRetryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;incrementRetryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;guards&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;canRetry&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;retryTimes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bom modelar uma aplica√ß√£o parece divertido agora, principalmente sabendo que todo o c√≥digo que escrevemos nessa tarefa √© o mesmo c√≥digo que ser√° usado na aplica√ß√£o final. No pr√≥ximo post iremos de fato usar esse codigo e criar nossa aplica√ß√£o front-end usando react e xstate.&lt;/p&gt;
&lt;p&gt;Te vejo l√°!&lt;/p&gt;</content:encoded></item><item><title>O jeito mais simples de entender identity functors</title><link>https://dielduarte.dev/blog/pt-br/o-jeito-mais-simples-de-entender-functors/</link><guid isPermaLink="true">https://dielduarte.dev/blog/pt-br/o-jeito-mais-simples-de-entender-functors/</guid><description>O jeito mais f√°cil de entender functors na minha humilde opini√£o √© o conceito...</description><pubDate>Tue, 14 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Eu realmente gosto de linguagens funcionais, e eu tenho estudado algumas nos √∫ltimos anos como Elm e agora Reason apenas por divers√£o. Nunca fiz nada s√©rio com essas linguagens como um App em produ√ß√£o em alguma empresa que trabalhei, mas eu gosto de trazer conceitos dessas linguagens para o Javascript. Meu problema √© que de alguma forma eu sempre acabo frustrado quando estou estudando alguns dos conceitos de programa√ß√£o funcional,&lt;/p&gt;
&lt;p&gt;como functors.&lt;/p&gt;
&lt;h2&gt;Mais oque realmente s√£o functors?&lt;/h2&gt;
&lt;p&gt;O jeito mais f√°cil de entender functors na minha humilde opini√£o √© o conceito:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functors s√£o fun√ß≈çes que retornam o valor passado de uma maneira que voc√™ consegue mapea-lo quantas vezes precisar at√© chegar no resultado desejado. Dessa forma, isso vai te ajudar a vizualizar melhor o fluxo de transforma√ß√£o do dado ao inv√©z de ficar criando v√°rias vari√°veis na m√©moria para salvar os estados intermedi√°rios da transforma√ß√£o que n√£o s√£o √∫teis no resultado final. Lembra do m√©todo &lt;code&gt;promise.then&lt;/code&gt; que conseguimos encadear v√°rias chamadas &lt;code&gt;.then&lt;/code&gt; tratando cada passo na transforma√ß√£o dos dados.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;talk is cheap, show me the code.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Qualquer tipo de valor pode ser mapeavel com functors como podemos ver no exemplo abaixo onde money √© uma string:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;convertMoneyToNumber&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;functor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;\$&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;parseFloat&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;//same as .map(money =&amp;gt; parseFloat(money))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Considerando que temos uma fun√ß√£o como essa:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;convertMoneyToNumber&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;moneyWithoutMask&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;\$&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;parseFloat&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;moneyWithoutMask&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos criar um helper chamado functor, essa fun√ß√£o aceita qualquer tipo de valor e retorna esse valor mape√°vel como arrays, ent√£o agora conseguimos encadear chamadas .map transformando qualquer valor no valor desejado.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;functor&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;anyValue&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;functor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;anyValue&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;anyValue&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como podemos ver, a fun√ß√£o functor recebe &lt;code&gt;qualquer valor&lt;/code&gt; e retorna um objeto com:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Um m√©todo chamado &lt;code&gt;map&lt;/code&gt; que recebe a fun√ß√£o e retorna um functor do valor que a fun√ß√£o passada retornou, fazendo com que o valor retornado seja mape√°vel novamente.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Um campo chamado &lt;code&gt;value&lt;/code&gt; que cont√©m o resultado da ultima fun√ß√£o executada, pesquisando voc√™ vai achar varia√ß√µes dessa ideia como o m√©todo &lt;code&gt;flatMap&lt;/code&gt; que retorna o valor da fun√ß√£o executada sem encapsular o mesmo em um functor, ent√£o na √∫ltima chamada da pilha de maps ao inv√©s de chamar &lt;code&gt;map(anyValue).value&lt;/code&gt; voc√™ vai chamar apenas &lt;code&gt;flatMap(anyValue)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agora com o nosso functor helper, podemos converter a fun√ß√£o convertMoneyToNumber para:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;convertMoneyToNumber&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;functor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;\$&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&apos;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;parseFloat&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;//same as .map(money =&amp;gt; parseFloat(money))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora n√≥s podemos mapear qualquer tipo de valor transformando seu valor original em um novo valor, n√£o apenas arrays! E s√≥ para deixarmos claro essa √© s√≥ a base da ideia de functors, temos muitas outras variantes e formas de compor functors.&lt;/p&gt;
&lt;p&gt;Eu espero que voc√™ tenha aprendido algo novo hoje!&lt;/p&gt;</content:encoded></item><item><title>Rescript sob o ponto de vista de um dev JS</title><link>https://dielduarte.dev/blog/pt-br/rescript-sob-o-ponto-de-vista-de-um-dev-js/</link><guid isPermaLink="true">https://dielduarte.dev/blog/pt-br/rescript-sob-o-ponto-de-vista-de-um-dev-js/</guid><description>Algumas opini√µes sobre a linguagem Rescript.</description><pubDate>Tue, 27 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Voc√™s sabem que eu gosto muito de estudar sobre novas linguagens, gosto de estudar sobre compiladores e mais. As duas √∫ltimas linguagens que venho estudando s√£o go (obrigado &lt;a href=&quot;https://github.com/guilhermehubner&quot;&gt;Guilherme&lt;/a&gt; por me influenciar a usar Go em um projeto paralelo que fazemos juntos, um dos melhores engenheiros que conhe√ßo üíú) e Rescript. Voc√™s tamb√©m sabem que ganho dinheiro como desenvolvedor Javascript/front-end e eu amo isso, mesmo com todos os problemas que temos em Javascript continua uma √≥tima linguagem, flex√≠vel e f√°cil para um iniciante usar e para um desenvolvedor avan√ßado continuar usando e gostando. A linguagem tamb√©m √© flex√≠vel o suficiente para rodar em qualquer lugar, Web, Desktop, Mobile, Hardware, voc√™ escolhe! A comunidade √© muito ativa, nesse momento provavelmente temos algumas centenas de libs novas no NPM dispon√≠vel.&lt;/p&gt;
&lt;p&gt;Essa √© uma apresenta√ß√£o e um artigo juntos, apenas explicando alguns dos pontos que eu considerei importante para dizer: &quot;quer saber? vale a pena aprender Rescript e usar no dia a dia.&quot;. Esse n√£o √© um artigo para dizer que eu odeio Typescript, simplesmente porque eu n√£o odeio typescript. Eu venho trabalhando com Typescript nos √∫ltimos dois anos e gosto muito, mas o fato de gostar n√£o me impede de ver que TS tem seus problemas e muito o que melhorar como qualquer outra linguagem no mundo.&lt;/p&gt;
&lt;p&gt;No final, tudo que eu quero √© me sentir produtivo usando algo para resolver problemas, mas os problemas certos. Eu quero me sentir confort√°vel em refatorar uma grande quantidade de c√≥digo e se o compilador compilou com sucesso tudo vai estar certo, de verdade. Eu quero escrever mais e fazer menos porque eu sei que o compilador n√£o vai deixar algu√©m usar as fun√ß√µes escritas da maneira errada, uma melhor infer√™ncia. Eu quero que isso seja r√°pido, t√£o r√°pido que eu vou salvar o arquivo duas vezes s√≥ pra ter certeza que funcionou ao inv√©z de abrir uma nova aba do twitter, Rescript.&lt;/p&gt;
&lt;p&gt;Essa foi a maior introdu√ß√£o que eu j√° fiz, o que mostra o qu√£o interessado eu estou. Daqui pra baixo vou falar sobre os pontos que me chamaram a aten√ß√£o sobre Rescript para come√ßar a aprender mais sobre a linguagem. N√£o significa que eu estou certo, apenas opin√µes.&lt;/p&gt;
&lt;h2&gt;Integra√ß√£o com JavaScript&lt;/h2&gt;
&lt;p&gt;Aqui vai uma ideia para voc√™: Javascript √© a linguagem da web! JavaScript est√£ em todos os lugares! Sempre aposte no JavaScript! Mesmo que voc√™ n√£o goste disso, √© a verdade. Ent√£o, um dos primeiros pontos que eu olhei foi o qu√£o f√°cil seria usar algum c√≥digo ou lib JavaScript sem precisar reescrever isso para Rescript.&lt;/p&gt;
&lt;p&gt;E por qu√™? Porque eu n√£o quero parar de usar JavaScript. Se alguma Tec nova super legal como Xstate surgir ou uma nova API no Browser, eu quero ser capaz de usar no meu c√≥digo Rescript de alguma forma, mesmo se a linguagem n√£o tem suporte oficial para isso ainda. Isso precisa ser f√°cil e r√°pido de criar se precisar.&lt;/p&gt;
&lt;p&gt;Vamos supor que eu queira usar Lodash, esperando por coment√°rios: &quot;voc√™ n√£o precisar usar lodash, bla bla bla...&quot; Eu aposto que Lodash j√° salvou sua vida muitas vezes e √© s√≥ um exemplo. Continuando, tudo que voc√™ precisaria fazer seria definir um arquivo de bindings muito similar com o que fariamos em Typescript, por exemplo:&lt;/p&gt;
&lt;p&gt;N√≥s criamos um arquivo &lt;code&gt;Lodash.res&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lodash/chunk&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;external&lt;/span&gt;&lt;span&gt; chunk&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&amp;gt;, int) =&amp;gt; array&amp;lt;array&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E ent√£o em algum outro arquivo, usariamos o m√≥dulo Lodash:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;chunks&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voc√™ tamb√©m pode exportar muitas fun√ß√µes do mesmo m√≥dulo, voltando ao nosso arquivo &lt;code&gt;Lodash.res&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lodash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;external&lt;/span&gt;&lt;span&gt; chunk&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&amp;gt;, int) =&amp;gt; array&amp;lt;array&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;@&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lodash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;external&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&amp;gt;, array&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;array&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;a&amp;gt; = &quot;difference&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E usar da mesma forma:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;chunks&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Output leg√≠vel&lt;/h2&gt;
&lt;p&gt;O c√≥digo gerado pelo compilador do Rescript √© leg√≠vel para humanos, limpo e m√≠nimo. O que faz o tamanho do nosso bundle ser bem similar como se fosse alguma pessoa escrevendo o Javascript. Veja o examplo do c√≥digo acima gerado pelo compilador:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;// Generated by ReScript, PLEASE EDIT WITH CARE&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lodash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;chunks&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;])&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;export&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;chunks&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;difference&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;/* chunks Not a pure module */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;√â Rescript ou JavaScript?&lt;/h2&gt;
&lt;p&gt;Outro ponto importante √© sobre a syntax, que √© muito parecida com JavaScript. Rescript √© outra linguagem diferente do Typescript que √© feito baseado em JavaScript, ent√£o ter uma syntax parecida √© muito bom para aprender r√°pido e ser produtivo com a linguagem de forma r√°pida. Para prover esse ponto, vamos fazer um exerc√≠cio chamado: &quot;√â Rescript ou JavaScript?&quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;√â Rescript ou JavaScript?&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;person&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Big ReScript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Rescript!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;√â Rescript ou JavaScript?&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;// 12&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Rescript!&lt;/code&gt; JS n√£o √© curried por default, mais sobre isso abaixo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;√â Rescript ou JavaScript?&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;how are you&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;firstItem&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] &lt;/span&gt;&lt;span&gt;// &quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Rescript!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;De fato, quase todos os exemplos funcionariam nos dois mundos. A diferen√ßa √© que com Rescript n√≥s teriamos a ajuda do compilar com uma infer√™ncia de tipos maravilhosa para nos ajudar a escrever um c√≥digo melhor e mais seguro, isso sem nem precisar escrever nenhum tipo at√© agora.&lt;/p&gt;
&lt;p&gt;Claro que existem algumas diferen√ßas tanto de syntax como de como a linguagem funciona, mas s√£o t√£o pequenas que √© apenas saber que elas existem. Por exemplo, ifs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;showMenu&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;showMenu&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;displayMenu&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nothing here...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;N√≥s n√£o precisamos usar parenteses em Rescript.&lt;/p&gt;
&lt;h2&gt;Sem Imports&lt;/h2&gt;
&lt;p&gt;Diferente de JS, n√£o existe export e import em Rescript. O que acontece √© que em Rescript todos os arquivos s√£o um modulo e o nome do arquivo precisa ser √∫nico, mesmo arquivos dentro de pastas s√£o acessados de forma global no mesmo n√≠vel que qualquer outro arquivo. Voc√™ s√≥ precisa usar o NomeDoArquivo que precisa ser em CamelCase ponto o tipo/fun√ß√£o que voc√™ quer usar.&lt;/p&gt;
&lt;p&gt;N√≥s tamb√©m podemos usar &lt;code&gt;open&lt;/code&gt; e ao inv√©z de usar &lt;strong&gt;NomeDoModule.AlgumaCoisa&lt;/strong&gt; todas as vezes, n√≥s fariamos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;open&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Lodash&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;chunks&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;chunk&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;myArray&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;N√£o ter imports/exports e ter um sistema de m√≥dulos por arquivo, nos for√ßa a manter uma estrutura mais flat que tem grandes vantagens a longo prazo.&lt;/p&gt;
&lt;p&gt;Trecho tirado da documenta√ß√£o do Rescript:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, every file&apos;s type declaration, binding and module is exported, aka publicly usable by another file. This also means those values, once compiled into JS, are immediately usable by your JS code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Sistema de Tipos&lt;/h2&gt;
&lt;p&gt;Bom eu poderia escrever alguma coisa com as minhas palavras, mas o time do Rescript fez um trabalho t√£o bom no site da documenta√ß√£o que eu vou apenas colar aqui o trecho sobre tipos:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Types are the highlight of ReScript! They are:&lt;/p&gt;
&lt;p&gt;Strong. A type can&apos;t change into another type. In JavaScript, your variable&apos;s type might change when the code runs (aka at runtime). E.g. a number variable might change into a string sometimes. This is an anti-feature; it makes the code much harder to understand when reading or debugging.&lt;/p&gt;
&lt;p&gt;Static. ReScript types are erased after compilation and don&apos;t exist at runtime. Never worry about your types dragging down performance. You don&apos;t need type info during runtime; we report all the information (especially all the type errors) during compile time. Catch the bugs earlier!&lt;/p&gt;
&lt;p&gt;Sound. This is our biggest differentiator versus many other typed languages that compile to JavaScript. Our type system is guaranteed to never be wrong. Most type systems make a guess at the type of a value and show you a type in your editor that&apos;s sometime incorrect. We don&apos;t do that. We believe that a type system that is sometime incorrect can end up being dangerous due to expectation mismatches.&lt;/p&gt;
&lt;p&gt;Fast. Many developers underestimate how much of their project&apos;s build time goes into type checking. Our type checker is one of the fastest around.&lt;/p&gt;
&lt;p&gt;Inferred. You don&apos;t have to write down the types! ReScript can deduce them from their values. Yes, it might seem magical that we can deduce all of your program&apos;s types, without incorrectness, without your manual annotation, and do so quickly. Welcome to ReScript =).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vamos explorar um pouco mais essa ideia de infer√™ncia, que √© uma das partes mais legais do Rescript. Escreva menos e fa√ßa mais!&lt;/p&gt;
&lt;p&gt;Vamos considerar a seguinte fun√ß√£o:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja o que o compilador diria se voc√™ tentasse usar essa fun√ß√£o passando duas strings ao inv√©z de numeros:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;We&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;ve found a bug for you&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Users&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;dielduarte&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;testing&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;rescript&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ExternalLibs&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ‚îÇ &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; ‚îÇ&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; ‚îÇ &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;This&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;has&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Somewhere&lt;/span&gt;&lt;span&gt; wanted&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;You&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;can&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;convert&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Belt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fromString&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;FAILED&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;cannot&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;make&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;progress&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;due&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;previous&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;errors&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Finish&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;compiling&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;exit&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isso √© como o compilador do TS deveria funcionar üòÖ com Rescript eu sinto que estou a todo momento programando com um colega do lado. O compilador me mostra o erro, porqu√™, e ainda como resolver o problema e repare novamente, n√≥s n√£o tivemos que escrever nenhum tipo at√© ent√£o.&lt;/p&gt;
&lt;p&gt;Mas como isso √© poss√≠vel? Bom, em Rescript usando o sinal &lt;code&gt;+&lt;/code&gt; s√≥ √© valido para numeros, ent√£o o compilador infere que por default a fun√ß√£o Add s√≥ funciona para numeros. If voc√™ quisesse concatenar strings, teria que usar &lt;code&gt;++&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Variants&lt;/h2&gt;
&lt;p&gt;A maioria das estruturas de dados em linguagens de program√ß√£o s√£o sobre &quot;isso e aquilo&quot;. Variants nos permite expressar &quot;isso ou aquilo&quot;.&lt;/p&gt;
&lt;p&gt;Varians no primeiro olhar, se parecem com Enum com superpoderes.&lt;/p&gt;
&lt;p&gt;Um exemplo simples seria:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt; myResponse &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Yes&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; No&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; PrettyMuch&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;areYouCrushingIt&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ol√° enums, meu velho amigo.&lt;/p&gt;
&lt;p&gt;Mas agora vem os super poderes, uma variant pode conter argumentos separado por uma virgula. Exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt; account &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; None&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Instagram(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Facebook&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ent√£o, para o mesmo tipo voc√™ poderia usar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;myAccount&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Facebook&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Josh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;friendAccount&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Instagram&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jenny&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Variants tamb√©m podem receber um Record (objeto):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt; user &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Number(int)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Id(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Joe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;me&lt;/code&gt; continua sendo do tipo user, mas uma variant diferente. Usar pattern matching + variants √© uma t√©cnica muito poderosa, e pode at√© evitar algumas issues de performance como voc√™ pode ver &lt;a href=&quot;https://rescript-lang.org/docs/manual/latest/variant#design-decisions&quot;&gt;aqui&lt;/a&gt; onde n√≥s conseguimos reduzir a complexidade do nosso programa de O(n) para O(1).&lt;/p&gt;
&lt;h2&gt;Pattern matching&lt;/h2&gt;
&lt;p&gt;Se variants s√£o enums com super poderes, pattern matching √© o switch com super poderes. Misturar os dois √© ü§Ø&lt;/p&gt;
&lt;p&gt;N√≥s podemos usar pattern matching para testar varia√ß√µes de qualquer tipo de formas diferentes, o exemplo abaixo est√£ testando se temos um &lt;code&gt;Number(id)&lt;/code&gt; ou um &lt;code&gt;Id({ name: Jow&quot;&quot; })&lt;/code&gt; um Id com o nome exatamente igual a Joe ou qualquer &lt;code&gt;Id(options)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt; user &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Number(int)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; Id(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Joe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Number&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Your id is =&amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Joe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Welcome Joe!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Welcome =&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pattern matching podem ser usados para testar qualquer tipo, listas, arrays, tuplas, variants e mais. E como se isso n√£o fosse o suficiente, pattern matching tamb√©m √© exaustivo. Isso significa que todas as vezes que voc√™ estiver testando uma variav√©l, o compilador te obriga a testar todos os padr√µes que aquela vari√°vel pode ter, e se por acaso voc√™ esquecer disso, o compilador te lembra. Vamos supor que eu esqueci de tratar a variant &lt;code&gt;Id&lt;/code&gt; no exemplo acima, o compilador me mostraria o seguinte erro:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;number&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Users&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;dielduarte&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;rescript&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ExternalLibs&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; ‚îÇ &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Joe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; ‚îÇ&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; ‚îÇ &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; ‚îÇ &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Number&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Your id is =&amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; ‚îÇ &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;You&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;forgot&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;handle&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;possible&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;here&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; example&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Finish&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;compiling&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mseconds&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Curried por default&lt;/h2&gt;
Essa √© uma das curiosidades sobre Rescript que eu mais curti. Todas as fun√ß√µes em Rescript s√£o curried por default, isso significa que, n√≥s podemos usar partial application sempre que for necess√°rio escrevendo menos c√≥digo para isso.
&lt;p&gt;Em Javascript, para criar o exemplo que usamos acima n√≥s precisariamos usar closures ou algum helper tipo &lt;a href=&quot;https://lodash.com/docs/4.17.15#curry&quot;&gt;Lodash curry&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;//closure&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;// 12&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em Rescript n√≥s escreveriamos a fun√ß√£o da mesma forma mas usuarimos de forma parcial:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;// 12&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Labeled arguments&lt;/h2&gt;
&lt;p&gt;Em Javascript/Typescript n√≥s estamos acostumados a usar um objeto como argumento para saber quais os nomes dos argumentos quando usando a fun√ß√£o sem precisar ir para a defini√ß√£o da mesma e tamb√©m, para poder passar os argumentos em qualquer ordem, exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;updateUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;userOptions&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;//using the function&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;updateUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;Diel&lt;/span&gt;&lt;span&gt;&apos;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em Rescript tamb√©m √© poss√≠vel passar um objeto, MAS, existe algo chamado &quot;labeled arguments&quot; que √© basicamente nomear os argumentos com um &lt;code&gt;~&lt;/code&gt; na frente, dessa forma todas as vezes que usar a fun√ß√£o poderiamos passar o nome do argumento em qualquer ordem, exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;updateUser&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;//usando a fn&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;updateUser&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Diel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;// arqui voc√™ passar o argumento em qualquer ordem&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lembra que todas as fun√ß√µes s√£o curried por default? Com labeled arguments n√≥s podemos usar a fun√ß√£o de forma parcial passando os argumentos em qualquer ordem, exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwoToA&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addTwoToA&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Rescript n√£o tem null nem undefined&lt;/h2&gt;
&lt;p&gt;Isso √© √≥timo! N√≥s n√£o precisamos nos preocupar com categoria inteira de bugs, de toda forma a ideia de ter um valor n√£o existente continua sendo muito √∫til e por isso Rescript em o Option.&lt;/p&gt;
&lt;p&gt;Um Option pode ser repesentado por &lt;code&gt;Some(Value)&lt;/code&gt; ou &lt;code&gt;None&lt;/code&gt; variants, e todas as vezes que voc√™ utilizar uma vari√°vel do tipo Option, Rescript vai te for√ßar a tratar todas as varia√ß√µes de forma exaustiva.&lt;/p&gt;
&lt;p&gt;Por exemplo, um avatar de usu√°rio √© bem poss√≠vel que seja inexistente em muitas aplica√ß√µes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;userAvatar&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;userAvatar&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;None&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The user doesn&apos;t have an avatar, let&apos;s show initials&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The user&apos;s avatar is &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E se voc√™ esquecer de tratar uma das variantes, o compilados vai te mostrar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;number&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Users&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;dielduarte&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;testing&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;rescript&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ExternalLibs&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ‚îÇ &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;userAvatar&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; ‚îÇ&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; ‚îÇ &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;userAvatar&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; ‚îÇ &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Some&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Js&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The user&apos;s avatar is &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; ‚îÇ &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;You&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;forgot&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;handle&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;possible&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;here&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; example&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;None&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Finish&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;compiling&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;82&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mseconds&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;üòç As vezes eu queria dar um beijo no compilador.&lt;/p&gt;
&lt;h2&gt;F√°cil de usar com qualquer ferramenta do ecosistema JS&lt;/h2&gt;
&lt;p&gt;Como Rescript compila para JS, voc√™ pode usar Rescript com qualquer ferramenta que funciona para JS, create-react-app, snowpack, Webpack, Babel, Rome, e mais...Qualquer coisa que funcione para JS vai funcionar em Rescript, porqu√™ a ideia √©:&lt;/p&gt;
&lt;p&gt;Rescript compila para JS =&amp;gt; e ent√£o qualquer ferramenta entende os arquivos JS gerados e simplesmente funciona! As ferramentas n√£o necessariamente precisam saber que voc√™ est√° usando Rescript. Para provar isso, eu criei esse template para usar Rescript com o Snowpack. Voc√™ pode acessar o c√≥digo aqui:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dielduarte/react-snowpack-rescript-template&quot;&gt;dielduarte/react-snowpack-rescript-template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Voc√™ pode ver que para inicializar o server do snowpack, eu importei o arquivo index.bs.js gerado pelo Rescript dentro do index.html &lt;a href=&quot;https://github.com/dielduarte/react-snowpack-rescript-template/blob/main/index.html#L13&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Conclus√£o&lt;/h2&gt;
&lt;p&gt;Como eu disse no come√ßo do post, a ideia aqui foi falar sobre alguns pontos que eu achei interessante para come√ßar a estudar mais sobre Rescript. Ent√£o eu n√£o falei de muitas coisas sobre a linguagem e suas vantagens, mesmo assim, eu espero que esse artigo te ajude a ter mais interesse em aprender mais sobre Rescript.&lt;/p&gt;
&lt;p&gt;E para voc√™, vale a pena estudar Rescript?&lt;/p&gt;</content:encoded></item><item><title>Um ano trabalhando remoto</title><link>https://dielduarte.dev/blog/pt-br/um-ano-trabalhando-remoto/</link><guid isPermaLink="true">https://dielduarte.dev/blog/pt-br/um-ano-trabalhando-remoto/</guid><description>Trabalhar remoto foi uma das melhores decis√µes que fiz at√© agora, eu espero que voc√™ possa aprender algo com a minha exp√™riencia.</description><pubDate>Mon, 20 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Trabalhar remoto foi uma das melhores decis√µes que tomei at√© agora, espero que voc√™ possa aprender algo com a minha exp√™riencia.&lt;/p&gt;
&lt;h3&gt;Primeiro de tudo,trabalho remoto n√£o significa qualidade de vida.&lt;/h3&gt;
&lt;p&gt;...Mas isso pode ajudar MUITO! Na minha humilde opini√£o pessoas que dizem que trabalho remoto √© qualidade de vida est√£o querendo te vender ou te passar uma vis√£o que n√£o √© 100% verdadeira. Sua qualidade de vida n√£o aumenta s√≥ porque voc√™ come√ßou a trabalhar remoto.&lt;/p&gt;
&lt;p&gt;O que ajuda muito na sua qualidade de vida √© a flexibilidade que o trabalho remoto te d√°.&lt;/p&gt;
&lt;h3&gt;Voc√™ n√£o precisa trabalhar todo dia no mesmo hor√°rio mais&lt;/h3&gt;
&lt;p&gt;De fato voc√™ apende muito sobre voc√™, como por exemplo qual o hor√°rio sou mais produtivo trabalhando? Qual o melhor hor√°rio para ir correr ou ir na academia? Qual o melhor hor√°rio para trabalhar naquela tarefa que precisa 100% do seu foco? E muitas outras perguntas...Agora voc√™ aprendeu sobre uma pessoa totalmente nova dentro de voc√™, que voc√™ nem sabia que existia. Isso √© maravilhoso! Mas tem alguns problemas que vamos conversar sobre o decorrer desse post.&lt;/p&gt;
&lt;h3&gt; Voc√™ n√£o precisa perder o seu tempo indo ao escrit√≥rio&lt;/h3&gt;
&lt;p&gt;Eu passei 5 anos indo da minha cidade para outra cidade para trabalhar/estudar, era apenas 50 minutos de dist√¢ncia. Em 5 anos, eu gastei 3 meses da minha vida apenas indo trabalhar.&lt;/p&gt;
&lt;p&gt;S√©rio, eu adoraria usar esses 3 meses de f√©rias, estudando, com minha familia/amigos. Qualquer coisa, menos no caminho para o trabalho.&lt;/p&gt;
&lt;p&gt;Tamb√©m √© importante te lembrar que voc√™ pode usar esse tempo para fazer algo produtivo, tempo √© vida,e essa √© uma chance √∫nica que nem todo mundo tem acesso. Pense sobre isso!&lt;/p&gt;
&lt;h3&gt;Voc√™ pode trabalhar em qualquer lugar&lt;/h3&gt; 
&lt;p&gt;...Se voc√™ tiver uma boa conex√£o de internet!!! Eu aposto que voc√™ j√° viu muitas fotos de pessoas trabalhando remoto na praia. Hmmm... Me desculpe, mas n√£o existe uma boa conex√£o de internet na praia, pelo menos n√£o no Brasil.&lt;/p&gt;
&lt;p&gt;Mas √© verdade, eu literalmente posso trabalhar onde eu quiser. Esse ano eu viajei para os Estados Unidos 2 vezes, Chile uma vez, e agora estou indo para o Canad√°. Eu n√£o precisei pedir f√©rias para os meus chefes, eles n√£o se importam qual √© o meu timezone, a coisa mais importante √© entregar valor,resolver problemas e manter os projetos funcionando! N√£o importa onde vivo, meu timezone ou quem sou. No meu time temos pessoas do Brasil, R√∫ssia, √çndia, Pol√¥nia, Estados Unidos e mais...&lt;/p&gt;
&lt;h3&gt;Agora vem a qualidade de vida&lt;/h3&gt; 
&lt;p&gt;Quando voc√™ fecha o seu computador depois das 8 horas di√°rias e pode ser o melhor marido, filho, amigo ou simplesmente pode cuidar das suas coisas como, estudar sem ter que dormir menos de 8 horas por dia pra isso, tocar um instrumento musical dia de semana, viajar quando voc√™ quiser.&lt;/p&gt;
&lt;p&gt;Voc√™ tamb√©m precisa cuidar da sua sa√∫de, s√©rio, no come√ßo eu estava apenas comendo fast food e tive s√©rios problemas de sa√∫de muito r√°pido. Cuidar da sua sa√∫de, seu corpo e sua mente n√£o tem nada haver com trabalho remoto.&lt;/p&gt;
&lt;p&gt;Voc√™ tamb√©m pode ganhar mais e isso pode ajudar muito. Trabalhando remoto voc√™ pode trabalhar para empresas que pagam mais que a m√©dia, empresas no Brasil n√£o podem pagar um bom sal√°rio comparando com um sal√°rio em dol√°res. Vamos ser honestos, voc√™ pode ter uma vida muito melhor se voc√™ ganha melhor, isso √© conhecido como capitalismo! Eu sinceramente n√£o sei o qu√£o bom capitalismo √©, mas √© um fato.&lt;/p&gt;
&lt;h1&gt;E quais os problemas?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ficar isolado.&lt;/li&gt;
&lt;li&gt;FOMO.&lt;/li&gt;
&lt;li&gt;Trabalhar mais de 8 horas por dia.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Todos esses s√£o problemas que voc√™ tem que enfrentar ao trabalhar remoto se voc√™ n√£o se organizar bem, e eles podem trazer problemas s√©rios para voc√™.&lt;/p&gt;
&lt;h3&gt;Ficar isolado&lt;/h3&gt;
&lt;p&gt;Quando voc√™ come√ßa a trabalhar remoto voc√™ vai ficar muito mais tempo na sua casa do que antes, isso vai te for√ßar a ficar isolado do resto do mundo. √â importante que voc√™ tenha amigos, saia para almo√ßar/jantar, conhe√ßa novas pessoas indo em meetups, confer√™ncias e pratique exerc√≠cios f√≠sicos. Resumindo, SAIA DE CASA, converse com pessoas, fique mais tempo com sua fam√≠lia e amigos. N√£o fique isolado do resto do mundo.&lt;/p&gt;
&lt;h3&gt;FOMO ou medo de estar perdendo algo&lt;/h3&gt;
&lt;p&gt;Eu n√£o posso te ajudar muito com isso, porque eu continuo aprendendo como lidar com isso. E isso √© um grande problema para muitas pessoas que trabalham remotamente. A melhor coisa a se fazer √© dar o seu 100% enquanto voc√™ est√° trabalhando e simplesmente ignorar totalmente quando voc√™ est√° offline.&lt;/p&gt;
&lt;p&gt;Quase 98% das coisas que acontecem no trabalho n√£o s√£o urgentes, eu recomendo muito a leitura do livro &lt;a href=&quot;https://www.amazon.com/Doesnt-Have-Be-Crazy-Work/dp/0062874780/ref=sr_1_1?crid=29HZM51PVO126&amp;amp;keywords=it+doesn%27t+have+to+be+crazy+at+work&amp;amp;qid=1579489696&amp;amp;sprefix=it+doesn%2Caps%2C161&amp;amp;sr=8-1&quot;&gt;it doesn&apos;t have to be crazy at work&lt;/a&gt; para voc√™ entender mais sobre t√©cnicas para manter a sanidade no trabalho, sendo remoto ou n√£o.&lt;/p&gt;
&lt;h3&gt;Trabalhar mais do que 8 horas por dia&lt;/h3&gt;
&lt;p&gt;Pelo menos na minha experi√™ncia, isso n√£o acontece todos os dias. Mas conhe√ßo muitas pessoas que trabalham muito mais do que 8 horas por dia e √© normal, voc√™ sente uma press√£o que voc√™ mesmo coloca porque voc√™ n√£o tem mais seu chefe olhando voc√™ &quot;trabalhando&quot; e a √∫nica forma de provar que voc√™ est√° trabalhando s√£o as suas entregas.&lt;/p&gt;
&lt;p&gt;Mas n√£o fique com medo, trabalhar √© um processo cont√≠nuo e voc√™ pode continuar amanh√£!&lt;/p&gt;
&lt;h1&gt;Vale a pena?&lt;/h1&gt;
&lt;p&gt;Como eu disse no come√ßo do texto, trabalhar remoto foi uma das melhores decis√µes que tomei at√© hoje na minha carreira. Seja seletivo, procure uma boa empresa com um bom ambiente para se trabalhar remoto e aproveite a sua nova vida!&lt;/p&gt;
&lt;p&gt;Eu espero que voc√™ tenha aprendido algo novo hoje! ‚ù§Ô∏è&lt;/p&gt;</content:encoded></item></channel></rss>